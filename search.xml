<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Html-漂亮的后台模板]]></title>
      <url>/2017/08/01/Html-%E6%BC%82%E4%BA%AE%E7%9A%84%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>分享一个后台模板地址，喜欢的可以自己克隆。</p>
<p><a href="http://envato.stammtec.de/themeforest/melon/pages_user_profile.html" target="_blank" rel="external">http://envato.stammtec.de/themeforest/melon/pages_user_profile.html</a> </p>
]]></content>
      
        <categories>
            
            <category> Html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Html </tag>
            
            <tag> Template </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tools-Vmware fusion 8.5 pro 注册码]]></title>
      <url>/2017/08/01/Tools-Vmware-fusion-8-5-pro-%E6%B3%A8%E5%86%8C%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>FY7N2-6RGD2-081XZ-UYWQC-ZPKCA</p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tools-Win8.1专业版秘钥]]></title>
      <url>/2017/08/01/Tools-Window8-1%E4%B8%93%E4%B8%9A%E7%89%88%E6%9C%AC%E7%A7%98%E9%92%A5/</url>
      <content type="html"><![CDATA[<p>XHQ8N  C3MCJ  RQXB6   WCHYG   C9WKB</p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tools-XP注册码]]></title>
      <url>/2017/08/01/Tools-XP%E6%B3%A8%E5%86%8C%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>QC986-27D34-6M3TY-JJXP9-TBGMD<br>CM3HY-26VYW-6JRYC-X66GX-JVY2D<br>DP7CM-PD6MC-6BKXT-M8JJ6-RPXGJ<br>F4297-RCWJP-P482C-YY23Y-XH8W3<br>HH7VV-6P3G9-82TWK-QKJJ3-MXR96<br>HCQ9D-TVCWX-X9QRG-J4B2Y-GR2TT<br>M6TF9-8XQ2M-YQK9F-7TBB2-XGG88<br>DG8FV-B9TKY-FRT9J-6CRCC-XPQ4G</p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
            <tag> 注册码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Funny-书生拿着书在打瞌睡]]></title>
      <url>/2017/08/01/Funny-%E4%B9%A6%E7%94%9F%E6%8B%BF%E7%9D%80%E4%B9%A6%E5%9C%A8%E6%89%93%E7%9E%8C%E7%9D%A1/</url>
      <content type="html"><![CDATA[<p>书生拿着书在打瞌睡。<br>欣赏他的人说，你瞧，他多用功，睡着了还拿着书。<br><a id="more"></a><br>不欣赏他的人说，你瞧，他多懒惰，一拿着书就睡着了。<br>看的人不同了，书生就不是那个书生了。<br>你爱他的时候，他的缺点都是优点，你不爱他了，他的优点也成了缺点。<br>看的眼光不同了，他就不是他了。<br>和一个人牵手的时候，就以为会是一生一世的相守。等到隔着太长的一段心路望回来，才惊讶地发现，虽然彼此都那么熟悉地活在彼此身边，却连相互述说的欲望都已经没有。是的，冷眼旁观着，彼此都在不知不觉中成了河川。而河川，永远都只会觉得是对方这座桥在走。<br>     一则佛教故事。<br>从前有个书生, 和未婚妻约好在某年某月某日结婚。到那一天，未婚妻却嫁给了别人。书生受此打击, 一病不起。这时, 路过一游方僧人，从怀里摸出一面镜子叫书生看……<br>书生看到茫茫大海，一名遇害的女子一丝不挂地躺在海滩上。路过一人, 看一眼，摇摇头, 走了。又路过一人, 将衣服脱下,给女尸盖上, 走了。再路过一人,过去, 挖个坑, 小心翼翼把尸体掩埋了。<br>僧人解释道, 那具海滩上的女尸，就是你未婚妻的前世。你是第二个路过的人，曾给过他一件衣服，她今生和你相恋, 只为还你一个情。但是她最终要报答一生一世的人, 是最后那个把她掩埋的人, 那人就是他现在的丈夫。<br>书生大悟。</p>
<p>前世，究竟是谁埋了你？<br>金岳霖找到了林徽因。他用一生的孤独来回报林徽因这位前世埋了他的人。<br>徐志摩找到了谁？“我将于茫茫人海中访我唯一灵魂的伴侣，得之，我幸；不得，我命。如此而已。”这是他在追求陆小曼时说的话。他轻轻地从林徽因的身边走了，正如他轻轻地 来，他轻轻地挥手，没有带走林身边的一朵云彩。为了满足陆奢靡的生活，他频繁的往来于南北授课，在碧蓝的天空中，他把他34岁的生命回报给了前世埋他的陆小曼。<br>人们从奈何桥上匆匆走过。<br>孟婆说：“行路的人，喝碗孟婆汤解解渴。”口渴的人心急地喝了。于是，那个前世埋他们的人，在他们头脑中渐渐模糊了。他们开始惊惶地四处张望，妄图在茫茫 人海中寻找今生的爱人。“众里寻它千百度，蓦然回首，那人却在灯火阑珊处。”其实，你携起他的手时，就是前世残存的记忆在提醒你了，前世埋你的人，就是你 身边与你相濡以沫的爱人啊。<br>     欣赏那个打瞌睡的书生吧。他真的很用功，你瞧，他睡着了还拿着书呢。<br>月光下的大海，泛着粼粼的波。<br>朋友说，思涵，和你的爱人去看看月光下的大海吧，在大海的最深处，也许就藏着你前生的记忆呢。<br>我在屏幕前轻轻的笑了。三生石上的旧精魂，真的不是一个美丽的传说么？与前世埋过我的爱人，携手在银色的沙滩，那该是今生最完美的一种幸福了吧。<br>我从奈何桥上走过，孟婆说：“行路的人，喝碗孟婆汤解解渴。”不，不不，我不喝，我宁愿在忘川河边忍受水淹火炙的磨折，我也一定要记得，前世，是谁埋的我……<br>     前世，究竟是谁埋了我…… </p>
]]></content>
      
        <categories>
            
            <category> Funny </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Funny </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Arithmetic-一致性Hash]]></title>
      <url>/2017/08/01/Arithmetic-%E4%B8%80%E8%87%B4%E6%80%A7Hash/</url>
      <content type="html"><![CDATA[<p>一致性哈希算法在1997年由麻省理工学院提出的一种分布式哈希（DHT）实现算法，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简 单哈希算法带来的问题，使得分布式哈希（DHT）可以在P2P环境中真正得到应用。 </p>
<p>一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义：</p>
<ul>
<li>1、平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。</li>
<li>2、单调性(Monotonicity)：单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到原有的或者新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。 </li>
<li>3、分散性(Spread)：在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性。 </li>
<li>4、负载(Load)：负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同 的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。</li>
</ul>
<p>在分布式集群中，对机器的添加删除，或者机器故障后自动脱离集群这些操作是分布式集群管理最基本的功能。如果采用常用的hash(object)%N算法，那么在有机器添加或者删除后，很多原有的数据就无法找到了，这样严重的违反了单调性原则。接下来主要讲解一下一致性哈希算法是如何设计的：</p>
<h3 id="环形Hash空间"><a href="#环形Hash空间" class="headerlink" title="环形Hash空间"></a>环形Hash空间</h3><p>按照常用的hash算法来将对应的key哈希到一个具有2^32次方个桶的空间中，即0~(2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。如下图<br><img src="20140411000507734.png" alt=""></p>
<h3 id="把数据通过一定的hash算法处理后映射到环上"><a href="#把数据通过一定的hash算法处理后映射到环上" class="headerlink" title="把数据通过一定的hash算法处理后映射到环上"></a>把数据通过一定的hash算法处理后映射到环上</h3><p>现在我们将object1、object2、object3、object4四个对象通过特定的Hash函数计算出对应的key值，然后散列到Hash环上。如下图：</p>
<pre><code>Hash(object1) = key1；
Hash(object2) = key2；
Hash(object3) = key3；
Hash(object4) = key4；
</code></pre><p><img src="20140411000620656.png" alt=""></p>
<h3 id="将机器通过hash算法映射到环上"><a href="#将机器通过hash算法映射到环上" class="headerlink" title="将机器通过hash算法映射到环上"></a>将机器通过hash算法映射到环上</h3><p>在采用一致性哈希算法的分布式集群中将新的机器加入，其原理是通过使用与对象存储一样的Hash算法将机器也映射到环中（一般情况下对机器的hash计算是采用机器的IP或者机器唯一的别名作为输入值），然后以顺时针的方向计算，将所有对象存储到离自己最近的机器中。<br>假设现在有NODE1，NODE2，NODE3三台机器，通过Hash算法得到对应的KEY值，映射到环中，其示意图如下：</p>
<pre><code>Hash(NODE1) = KEY1;
Hash(NODE2) = KEY2;
Hash(NODE3) = KEY3;
</code></pre><p><img src="20140411000853609.png" alt=""></p>
<p>通过上图可以看出对象与机器处于同一哈希空间中，这样按顺时针转动object1存储到了NODE1中，object3存储到了NODE2中，object2、object4存储到了NODE3中。在这样的部署环境中，hash环是不会变更的，因此，通过算出对象的hash值就能快速的定位到对应的机器中，这样就能找到对象真正的存储位置了。</p>
<h3 id="机器的删除与添加"><a href="#机器的删除与添加" class="headerlink" title="机器的删除与添加"></a>机器的删除与添加</h3><p>普通hash求余算法最为不妥的地方就是在有机器的添加或者删除之后会照成大量的对象存储位置失效，这样就大大的不满足单调性了。下面来分析一下一致性哈希算法是如何处理的。</p>
<h4 id="1-节点（机器）的删除"><a href="#1-节点（机器）的删除" class="headerlink" title="1. 节点（机器）的删除"></a>1. 节点（机器）的删除</h4><p>以上面的分布为例，如果NODE2出现故障被删除了，那么按照顺时针迁移的方法，object3将会被迁移到NODE3中，这样仅仅是object3的映射位置发生了变化，其它的对象没有任何的改动。如下图：<br><img src="20140411001033656.png" alt=""></p>
<h4 id="2-节点（机器）的添加"><a href="#2-节点（机器）的添加" class="headerlink" title="2. 节点（机器）的添加"></a>2. 节点（机器）的添加</h4><p>如果往集群中添加一个新的节点NODE4，通过对应的哈希算法得到KEY4，并映射到环中，如下图：<br><img src="20140411001211062.png" alt="">    </p>
<p>通过按顺时针迁移的规则，那么object2被迁移到了NODE4中，其它对象还保持这原有的存储位置。通过对节点的添加和删除的分析，一致性哈希算法在保持了单调性的同时，还是数据的迁移达到了最小，这样的算法对分布式集群来说是非常合适的，避免了大量数据迁移，减小了服务器的的压力。</p>
<h3 id="平衡性"><a href="#平衡性" class="headerlink" title="平衡性"></a>平衡性</h3><p>根据上面的图解分析，一致性哈希算法满足了单调性和负载均衡的特性以及一般hash算法的分散性，但这还并不能当做其被广泛应用的原由，因为还缺少了平衡性。下面将分析一致性哈希算法是如何满足平衡性的。hash算法是不保证平衡的，如上面只部署了NODE1和NODE3的情况（NODE2被删除的图），object1存储到了NODE1中，而object2、object3、object4都存储到了NODE3中，这样就照成了非常不平衡的状态。在一致性哈希算法中，为了尽可能的满足平衡性，其引入了虚拟节点。<br>——“虚拟节点”（ virtual node ）是实际节点（机器）在 hash 空间的复制品（ replica ），一实际个节点（机器）对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以hash值排列。<br>以上面只部署了NODE1和NODE3的情况（NODE2被删除的图）为例，之前的对象在机器上的分布很不均衡，现在我们以2个副本（复制个数）为例，这样整个hash环中就存在了4个虚拟节点，最后对象映射的关系图如下：</p>
<p><img src="20140411001433375.png" alt=""><br>根据上图可知对象的映射关系：object1-&gt;NODE1-1，object2-&gt;NODE1-2，object3-&gt;NODE3-2，object4-&gt;NODE3-1。通过虚拟节点的引入，对象的分布就比较均衡了。那么在实际操作中，正真的对象查询是如何工作的呢？对象从hash到虚拟节点到实际节点的转换如下图：<br><img src="20140411001540656.png" alt=""><br>“虚拟节点”的hash计算可以采用对应节点的IP地址加数字后缀的方式。例如假设NODE1的IP地址为192.168.1.100。引入“虚拟节点”前，计算 cache A 的 hash 值：<br>Hash(“192.168.1.100”);<br>引入“虚拟节点”后，计算“虚拟节”点NODE1-1和NODE1-2的hash值：<br>Hash(“192.168.1.100#1”); // NODE1-1<br>Hash(“192.168.1.100#2”); // NODE1-2</p>
]]></content>
      
        <categories>
            
            <category> Arithmetic </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Arithmetic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Funny-你笑了吗?]]></title>
      <url>/2017/08/01/Funny-%E4%BD%A0%E7%AC%91%E4%BA%86%E5%90%97/</url>
      <content type="html"><![CDATA[<p>小漫画大道理<br><a id="more"></a></p>
<p><img src="5459032_4.jpg" alt=""><br><img src="5459032_5.jpg" alt=""><br><img src="5459032_6.jpg" alt=""><br><img src="5459032_7.jpg" alt=""><br><img src="5459032_8.jpg" alt=""><br><img src="5459032_9.jpg" alt=""><br><img src="5459032_10.jpg" alt=""><br><img src="5459032_11.jpg" alt=""><br><img src="5459032_12.jpg" alt=""><br><img src="5459032_13.jpg" alt=""><br><img src="5459032_14.jpg" alt=""><br><img src="5459032_15.jpg" alt=""><br><img src="5459032_16.jpg" alt=""><br><img src="5459032_17.jpg" alt=""><br><img src="5459032_18.jpg" alt=""><br><img src="5459032_19.jpg" alt=""><br><img src="5459032_20.jpg" alt=""><br><img src="5459032_21.jpg" alt=""><br><img src="5459032_22.jpg" alt=""><br><img src="5459032_23.jpg" alt=""><br><img src="5459032_24.jpg" alt=""><br><img src="5459032_25.jpg" alt=""><br><img src="5459032_26.jpg" alt=""><br><img src="5459032_27.jpg" alt=""><br><img src="5459032_28.jpg" alt=""><br><img src="5459032_29.jpg" alt=""><br><img src="5459032_30.jpg" alt=""><br><img src="5459032_31.jpg" alt=""><br><img src="5459032_32.jpg" alt=""><br><img src="5459032_33.jpg" alt=""><br><img src="5459032_34.jpg" alt=""><br><img src="5459032_35.jpg" alt=""><br><img src="5459032_36.jpg" alt=""><br><img src="5459032_37.jpg" alt=""><br><img src="5459032_38.jpg" alt=""><br><img src="5459032_39.jpg" alt=""><br><img src="5459032_40.jpg" alt=""><br><img src="5459032_41.jpg" alt=""><br><img src="5459032_42.jpg" alt=""><br><img src="5459032_43.jpg" alt=""><br><img src="5459032_44.jpg" alt=""><br><img src="5459032_45.jpg" alt=""><br><img src="5459032_46.jpg" alt=""><br><img src="5459032_47.jpg" alt=""><br><img src="5459032_48.jpg" alt=""><br><img src="5459032_49.jpg" alt=""><br><img src="5459032_50.jpg" alt=""><br><img src="5459032_51.jpg" alt=""><br><img src="5459032_52.jpg" alt=""><br><img src="5459032_53.jpg" alt=""><br><img src="5459032_54.jpg" alt=""><br><img src="5459032_56.jpg" alt=""><br><img src="5459032_55.jpg" alt=""><br><img src="5459032_1.jpg" alt=""><br><img src="5459032_2.jpg" alt=""><br><img src="5459032_3.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Funny </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Funny </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Funny-小漫画大道理]]></title>
      <url>/2017/08/01/Funny-%E5%B0%8F%E6%BC%AB%E7%94%BB%E5%A4%A7%E9%81%93%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="小猫咪的哲理人生"><a href="#小猫咪的哲理人生" class="headerlink" title="小猫咪的哲理人生"></a>小猫咪的哲理人生</h1><a id="more"></a>
<p><img src="p1zz9771rfsd.jpg" alt="1"><br><img src="59gx9o4dks5c.jpg" alt="2"><br><img src="5dc5k5vz56sf.jpg" alt="3"><br><img src="s72u3edi6e7f.jpg" alt="4"><br><img src="a2oa2xxc57a1.jpg" alt="5"><br><img src="df44ergr2ess.jpg" alt="6"><br><img src="djj2xxqxdjx5.jpg" alt="7"><br><img src="mh67e2j7lo7y.jpg" alt="8"><br><img src="3uqls0l200zz.jpg" alt="9"><br><img src="wlj7rl3fj5cg.jpg" alt="10"><br><img src="rlr4l5xrdsrh.jpg" alt="11"><br><img src="1wv75v8iyww8.jpg" alt="12"><br><img src="jjnj24r456pp.jpg" alt="13"><br><img src="p8bdooodoso2.jpg" alt="14"><br><img src="kny4arhkynkn.jpg" alt="15"><br><img src="duuzdepltpdy.jpg" alt="16"><br><img src="a2dzq46dzxx2.jpg" alt="17"><br><img src="iccnyttyu9cf.jpg" alt="18"><br><img src="6844aa44taff.jpg" alt="19"><br><img src="ojj8rrfruqy2.jpg" alt="20"><br><img src="txmxihh6dxjq.jpg" alt="21"><br><img src="gbgd7q1uqgtt.jpg" alt="22"><br><img src="mb0lmvbmmlol.jpg" alt="23"><br><img src="r6h4dwy3wyr8.jpg" alt="24"><br><img src="z28c2fgtvceb.jpg" alt="25"><br><img src="fzxxkq1nkkvk.jpg" alt="26"><br><img src="8lrt3xkbka69.jpg" alt="27"><br><img src="enqeq7e75cey.jpg" alt="28"><br><img src="e5muqxqqsxu.jpeg" alt="29"><br><img src="ncec00mderdz.jpg" alt="30"><br><img src="f5axrqz7y64y.jpg" alt="31"><br><img src="gpfrrrsjyrzr.jpg" alt="32"><br><img src="t6stytzm5tky.jpg" alt="33"><br><img src="we50g5dupurd.jpg" alt="34"><br><img src="1zwqbh73iwde.jpg" alt="35"><br><img src="k2o9x5seyezi.jpg" alt="36"><br><img src="sl6zm2l1e11w.jpg" alt="37"><br><img src="ucuov79hs5u0.jpg" alt="38"><br><img src="no0didd33nss.jpg" alt="39"><br><img src="s62kz5j2mt25.jpg" alt="40"></p>
]]></content>
      
        <categories>
            
            <category> Funny </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Funny </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mem-内存管理原理]]></title>
      <url>/2017/08/01/Memcached-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>内存管理中一个令人头痛的问题就是内存碎片管理。操作系统、虚拟机垃圾回收在这方面<br>想了许多方法：压缩、复制。Memcached使用了一个非常简单的办法—固定空间分配。</p>
<p>Memcached 将内存空间分为一组slab，每个slab里面又包含一组chunk，同一个slab里面的<br>每个chunk的大小是固定的，拥有相同大小的chunk的slab被组织在一起，叫做slab_class，<br>如图所示。</p>
<p>存储数据时根据数据的size大小，寻找一个大于size的最小chunk<br>将数据写入。这种内存管理方式避免了内存碎片的管理问题，内存<br>的分配和释放都是以chunk为单位的。和其他缓存一样，memcached<br>采用LRU算法释放最近最久未被访问的数据占用的空间，释放的<br>chunk被标记为魏永，等待下一个合适大小数据的写入。</p>
<p>当然这种方式也会带来内存浪费的问题。数据只能存入一个比他大的<br>chunk里，而一个chunk只能存一个数据，其他的空间被浪费了。<br>如果启动参数配置不合理，浪费会更加惊人，发现没有缓存多少<br>数据，内存空间就用尽了。</p>
<p><img src="Image.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Memcached </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Memcached </tag>
            
            <tag> 原理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql-CONCAT及GROUP_CONCAT]]></title>
      <url>/2017/08/01/Mysql-CONCAT%E5%8F%8AGROUP-CONCAT/</url>
      <content type="html"><![CDATA[<h3 id="一、CONCAT（）函数"><a href="#一、CONCAT（）函数" class="headerlink" title="一、CONCAT（）函数"></a>一、CONCAT（）函数</h3><p>CONCAT（）函数用于将多个字符串连接成一个字符串。<br>使用数据表Info作为示例，其中SELECT id,name FROM info LIMIT 1;的返回结果为<br>+—-+——–+<br>| id | name   |<br>+—-+——–+<br>|  1 | BioCyc |<br>+—-+——–+</p>
<h4 id="1、语法及使用特点："><a href="#1、语法及使用特点：" class="headerlink" title="1、语法及使用特点："></a>1、语法及使用特点：</h4><p>CONCAT(str1,str2,…)<br>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。</p>
<h4 id="2、使用示例："><a href="#2、使用示例：" class="headerlink" title="2、使用示例："></a>2、使用示例：</h4><p>SELECT CONCAT(id, ‘，’, name) AS con FROM info LIMIT 1;返回结果为<br>+———-+<br>| con      |<br>+———-+<br>| 1,BioCyc |<br>+———-+</p>
<p>SELECT CONCAT(‘My’, NULL, ‘QL’);返回结果为<br>+————————–+<br>| CONCAT(‘My’, NULL, ‘QL’) |<br>+————————–+<br>| NULL                     |<br>+————————–+</p>
<h4 id="3、如何指定参数之间的分隔符"><a href="#3、如何指定参数之间的分隔符" class="headerlink" title="3、如何指定参数之间的分隔符"></a>3、如何指定参数之间的分隔符</h4><p>使用函数CONCAT_WS（）。使用语法为：CONCAT_WS(separator,str1,str2,…)<br>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。</p>
<p>如SELECT CONCAT<em>WS(‘</em>‘,id,name) AS con_ws FROM info LIMIT 1;返回结果为<br>+———-+<br>| con_ws   |<br>+———-+<br>| 1_BioCyc |<br>+———-+</p>
<p>SELECT CONCAT_WS(‘,’,’First name’,NULL,’Last Name’);返回结果为<br>+———————————————-+<br>| CONCAT_WS(‘,’,’First name’,NULL,’Last Name’) |<br>+———————————————-+<br>| First name,Last Name                         |<br>+———————————————-+</p>
<h3 id="二、GROUP-CONCAT（）函数"><a href="#二、GROUP-CONCAT（）函数" class="headerlink" title="二、GROUP_CONCAT（）函数"></a>二、GROUP_CONCAT（）函数</h3><p>GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。<br>使用表info作为示例，其中语句SELECT locus,id,journal FROM info WHERE locus IN(‘AB086827’,’AF040764’);的返回结果为<br>+———-+—-+————————–+<br>| locus    | id | journal                  |<br>+———-+—-+————————–+<br>| AB086827 |  1 | Unpublished              |<br>| AB086827 |  2 | Submitted (20-JUN-2002)  |<br>| AF040764 | 23 | Unpublished              |<br>| AF040764 | 24 | Submitted (31-DEC-1997)  |<br>+———-+—-+————————–+</p>
<h4 id="1、使用语法及特点："><a href="#1、使用语法及特点：" class="headerlink" title="1、使用语法及特点："></a>1、使用语法及特点：</h4><p>GROUP_CONCAT([DISTINCT] expr [,expr …]<br>[ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] [,col …]]<br>[SEPARATOR str_val])<br>在 MySQL 中，你可以得到表达式结合体的连结值。通过使用 DISTINCT 可以排除重复值。如果希望对结果中的值进行排序，可以使用 ORDER BY 子句。<br>SEPARATOR 是一个字符串值，它被用于插入到结果值中。缺省为一个逗号 (“,”)，可以通过指定 SEPARATOR “” 完全地移除这个分隔符。<br>可以通过变量 group_concat_max_len 设置一个最大的长度。在运行时执行的句法如下： SET [SESSION | GLOBAL] group_concat_max_len = unsigned_integer;<br>如果最大长度被设置，结果值被剪切到这个最大长度。如果分组的字符过长，可以对系统参数进行设置：SET @@global.group_concat_max_len=40000;</p>
<h4 id="2、使用示例：-1"><a href="#2、使用示例：-1" class="headerlink" title="2、使用示例："></a>2、使用示例：</h4><p>语句 SELECT locus,GROUP_CONCAT(id) FROM info WHERE locus IN(‘AB086827’,’AF040764’) GROUP BY locus; 的返回结果为<br>+———-+——————+<br>| locus    | GROUP_CONCAT(id) |<br>+———-+——————+<br>| AB086827 | 1,2              |<br>| AF040764 | 23,24            |<br>+———-+——————+</p>
<p>语句 SELECT locus,GROUP<em>CONCAT(distinct id ORDER BY id DESC SEPARATOR ‘</em>‘) FROM info WHERE locus IN(‘AB086827’,’AF040764’) GROUP BY locus;的返回结果为<br>+———-+———————————————————-+<br>| locus    | GROUP<em>CONCAT(distinct id ORDER BY id DESC SEPARATOR ‘</em>‘) |<br>+———-+———————————————————-+<br>| AB086827 | 2_1                                                      |<br>| AF040764 | 24_23                                                    |<br>+———-+———————————————————-+</p>
<p>语句SELECT locus,GROUP_CONCAT(concat_ws(‘, ‘,id,journal) ORDER BY id DESC SEPARATOR ‘. ‘) FROM info WHERE locus IN(‘AB086827’,’AF040764’) GROUP BY locus;的返回结果为<br>+———-+————————————————————————–+<br>| locus    | GROUP_CONCAT(concat_ws(‘, ‘,id,journal) ORDER BY id DESC SEPARATOR ‘. ‘) |<br>+———-+————————————————————————–+<br>| AB086827 | 2, Submitted (20-JUN-2002). 1, Unpublished                               |<br>| AF040764 | 24, Submitted (31-DEC-1997) . 23, Unpublished                            |<br>+———-+————————————————————————–+</p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Concat </tag>
            
            <tag> Group_concat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql-Datediff()函数]]></title>
      <url>/2017/08/01/Mysql-Datediff-%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>DATEDIFF() 函数返回两个日期之间的天数。</p>
<p>DATEDIFF(date1,date2)</p>
<p>事例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> con_contract</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    <span class="keyword">datediff</span>(</div><div class="line">        FROM_UNIXTIME(remindtime, <span class="string">'%Y-%m-%d'</span>),<span class="keyword">CURDATE</span>()</div><div class="line">    ) = &#123;$limit_time&#125; <span class="keyword">and</span> state = <span class="number">3</span> <span class="keyword">and</span> archivestate &lt;&gt; <span class="number">4</span> <span class="keyword">and</span> archivestate &lt;&gt; <span class="number">5</span><span class="string">";</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Datediff </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql-Int类型]]></title>
      <url>/2017/07/31/Mysql-Int%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>几种整形数据类型的长度</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><pre><code>类型            占用空间(字节)        最小值(带符号的/无符号的)                最大值(带符号的/无符号的)
----------------------------------------------------------------------------------------------------
TINYINT        1                    -128                                127
                                0                                    255
----------------------------------------------------------------------------------------------------
SMALLINT    2                    -32768                                32767
                                0                                    65535
----------------------------------------------------------------------------------------------------
MEDIUMINT    3                    -8388608                            8388607
                                0                                    16777215
----------------------------------------------------------------------------------------------------
int            4                    -2147483648                            2147483647
                                0                                    4294967295
----------------------------------------------------------------------------------------------------
BIGINT        8                    -9223372036854775808                9223372036854775807
                                0                                    18446744073709551615
----------------------------------------------------------------------------------------------------
注:1字节=8位
</code></pre>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Int </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql-Varchar类型]]></title>
      <url>/2017/07/31/Mysql-Varchar%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>1.varchar存储规则：<br>    5.0版本以上，varchar(20)，指的是20字符，无论存放的是数字、字母还是UTF8汉字（每个汉字3字节），都可以存放20个.<br>    上面测试过了如果超过20个字符mysql截取前20个插入<br>    但是 最大大小是65532字节 也就是 varchar字节最大65535，utf8编码一个字符3个字节65535/3=21785。汉字不能超过21785.</p>
<p>2.关于varchar与set 类型中存储的字符串使用’,’隔开时<br>    可以采用:SELECT * FROM <code>表名</code> WHERE FIND_IN_SET(‘要找的字符串’,<code>字段</code>);这种写法来找出;<br>    最多可以有64个成员  枚举最多有65535种不同值</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Varchar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql-蠕虫复制]]></title>
      <url>/2017/07/31/Mysql-%E8%A0%95%E8%99%AB%E5%A4%8D%E5%88%B6/</url>
      <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`table`</span> (<span class="string">`id`</span>,<span class="string">`aa`</span>,<span class="string">`bb`</span>,<span class="string">`cc`</span> ) <span class="keyword">SELECT</span> <span class="string">''</span>,<span class="string">'aa内容'</span>,<span class="string">'bb注意cc符号区别'</span>,<span class="string">`cc`</span> <span class="keyword">FROM</span> <span class="string">`table`</span> (<span class="keyword">WHERE</span> .....)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql-开启日志]]></title>
      <url>/2017/07/31/Mysql-%E5%BC%80%E5%90%AF%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">port=3306</div><div class="line">log=D:/mysql.log</div><div class="line">log_slow_queries=C:/temp/mysql_slow.log</div><div class="line">long_query_time=1</div></pre></td></tr></table></figure>
<p>show binary logs;</p>
<p>//查看binlog日志<br>show binlog events in ‘mysql-bin.000181’;</p>
<p>查看日志是否开启<br>1).可以通过Mysql配置文件my.cnf来确认（Mysql默认开启二进制日志记录）：<br>Replication Master Server (default)<br>binary logging is required for replication<br>log-bin=mysql-bin<br>刷新日志<br>flush logs;<br>查看当前日志位置<br>show master status;<br>查看当前所有日志<br>show master logs;<br>清空所有的bin-log日志<br>reset master;</p>
<p>查看日志内容<br>mysqlbinlog –no-defaults mysql-bin.00001;<br>删除bin-log<br>mysql&gt; purge binary logs to ‘ablelee.000003’;<br>Query OK, 0 rows affected (0.16 sec)<br>关闭 bin-log 日志<br>找到配置文件my.cnf，对于linux，一般默认在/etc目录下，打开此文件，使用井号(#)注释掉如下两个配置项目即可。<br>log-bin=mysql-bin<br>binlog_format=mixed<br>显示所有日志<br>mysql&gt; show binary logs;</p>
<p>//查看所有日志<br>show binary logs;<br>//查看正在使用的binlog<br>show master status;</p>
<p>purge binary logs to ‘mysql-tb-bin.000005’;<br>这个命令就是清理除mysql-tb-bin.000005以外的其他二进制日志；</p>
<p>//查看binlog日志<br>show binlog events in ‘mysql-bin.000181’;</p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Php 一phpStorm快捷键]]></title>
      <url>/2017/07/31/Php-phpStorm%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>现在把一些使用技巧记录下来,免得到时候忘了再查.</p>
<p>来源于网络。</p>
<a id="more"></a>
<p>1,从版本控制系统创建项目:<br>CVS -&gt; Checkout from Version Control</p>
<p>2, 关联DOC文档:<br>右键External Librariese -&gt; Configure PHP include paths</p>
<p>3, 去掉波浪线:<br>settings -&gt; Editor -&gt; Colors &amp; Fonts -&gt; General -&gt; TYPO-&gt;Effects</p>
<p>4, 显示行号:<br>settings -&gt; Editor-&gt;Appearance-&gt;Show line numbers </p>
<p>5,远程或本地同步文件:<br>Tools -&gt; Deploments -&gt; Configuration</p>
<p>6, 去掉右上角浏览器图标:<br>settings -&gt; tools -&gt; WebBrowsers</p>
<p>7, 添加VIM插件:<br>settings-&gt;editor -&gt;plugins-&gt;browse repositories -&gt;搜索VIM</p>
<p>8,启动的时候不打开工程文件<br>Settings-&gt;General去掉Reopen last project on startup.</p>
<p>9, 取消自动保存<br>appearance -&gt; system settings -&gt; save file的两个选项 去掉</p>
<p>10, 将编辑的文件加星号标识:<br>settings -&gt; editor -&gt; editor tabs -&gt; 勾选 mark modifed tabs…</p>
<p>11, 添加扩展名高亮显示:<br>settings -&gt; editor -&gt; file types  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">常用快捷键:</div><div class="line">control + option + l    将代码格式化</div><div class="line">command + shift + u    切换大小写</div><div class="line">command + shift + + / command + shift + -     折叠/展开所有区块</div><div class="line">command + e     列出最后打开的文件</div><div class="line">control + tab  / control + shift + tab     切换打开的文件</div><div class="line">command + /     行注释</div><div class="line">ctrl + shift + /      块注释</div><div class="line">command + b     函数追踪,同command +单击</div><div class="line">command + alt + 左右箭头      操作动作前进/回退</div><div class="line">shift + command + r      按文件名搜索对应文件所在路径</div><div class="line">shift + command + t      按类名搜索对应文件所在路径</div><div class="line">shift + command + c      复制当前文件所在路径</div><div class="line">Command + Shift + O     打开文件</div><div class="line">Command + O          打开类</div><div class="line">alt + F1        定位编辑文件所在位置:</div><div class="line">alt + F12        打开命令行栏</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Php </tag>
            
            <tag> PhpStorm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell – Wget 克隆网站]]></title>
      <url>/2017/07/31/Shell-%E2%80%93-Wget-%E5%85%8B%E9%9A%86%E7%BD%91%E7%AB%99%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      <content type="html"><![CDATA[<p>有时候觉得网上看到的漂亮的模板，想下载怎么办哈哈哈wget就搞定了。</p>
<a id="more"></a>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -k -p -nH -N http://www.baidu.com</div></pre></td></tr></table></figure>
<p>-k   把已下载文件中的所有链接都转换为本地引用，不在依赖原始或在线内容</p>
<p>-p   下载所有必要文件，确保离线可用，包括图片和样式表</p>
<p>-nH  禁止把文件下载到以主机名为前缀的文件夹中。</p>
<p>-N   启用文件的时间戳,以匹配来源的时间戳.</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> Wget </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Php 一Api通信规则]]></title>
      <url>/2017/07/31/Php-Api%E9%80%9A%E4%BF%A1%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<p>Api 通信中，可以采用非对称加密的方式，来提高安全性，也可以采用，下面的通信规则。</p>
<p>如果采用下面方式，可以将时间戳取前7位有效数字来加密这样每隔十几分钟MD5<br>就一换，还能避开服务器时间不同步问题，也是不错的选择。</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *生成THQS算法的信息查询串（Query string）</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_query_string</span><span class="params">($info)</span> </span>&#123;</div><div class="line">    ksort($info);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;http_build_query($info);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据数组生成HTTP请求URL参数</div><div class="line"> * <span class="doctag">@param</span> unknown_type $array</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">http_build_query</span><span class="params">($array)</span> </span>&#123;</div><div class="line">    $query = <span class="string">''</span>;</div><div class="line">    <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">        $key = <span class="keyword">self</span>::urlencode($key);</div><div class="line">        $value = <span class="keyword">self</span>::urlencode($value);</div><div class="line">        $query .= <span class="string">"$key=$value&amp;"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($query)) &#123;</div><div class="line">        $query = substr($query, <span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $query;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * *不要被转义了。</div><div class="line"> * <span class="doctag">@param</span> $string</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">urlencode</span><span class="params">($string)</span> </span>&#123;</div><div class="line">    $string = str_replace(<span class="string">'*'</span>, <span class="string">'-tSl2nWmMsagD-gEr'</span>, $string);</div><div class="line">    $string = urlencode($string);</div><div class="line">    <span class="keyword">return</span> str_replace(<span class="string">'-tSl2nWmMsagD-gEr'</span>, <span class="string">'*'</span>, $string);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 	生成THQS算法的hash值</div><div class="line"> *  $salt = API Key 秘钥</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_hashed_value</span><span class="params">($qs, $time, $salt)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> strtoupper(md5($qs . <span class="string">"&amp;time=$time&amp;salt=$salt"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *	return string</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">ccXml</span><span class="params">()</span></span>&#123;</div><div class="line">    header(<span class="string">'Content-Type:text/xml'</span>);</div><div class="line">    $str = <span class="string">''</span>;</div><div class="line">    $str .= <span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>;</div><div class="line">    $str .= <span class="string">"&lt;result&gt;OK&lt;/result&gt;"</span>;</div><div class="line">    <span class="keyword">return</span> $str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Php </tag>
            
            <tag> Api </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Composer - 管理PHP依赖]]></title>
      <url>/2017/07/21/Composer-%E7%AE%A1%E7%90%86PHP%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>现在软件规模越来越大，PHP项目的开发模式和许多年前已经有了很大变化。记得初学PHP那会儿，boblog是一个很好的例子，几乎可以代表 PHP项目的开发模式。当时PHP 5.x以上的版本刚开始流行，仍然有大量的生产环境使用PHP4.x。由于历史遗留的问题，OOP思想在PHP项目中还不是那么广泛流行。随着 PHP5.3的发布，PHP项目规模的扩大，在其他语言领域大展身手的OOP开发模式也在PHP中崭露头角。<br><a id="more"></a><br>大型项目不可能是从头开始的，使用社区已经提供的资源可以为项目带来很大的便利。然而各自为政的打包方式、依赖关系的处理，导致了很难将两个开源项 目集成到一起。虽然有pear这种PHP官方支持的包管理工具，但是依然没有很好的统一的依赖关系管理的办法。直到Composer的出现。</p>
<p>Composer的依赖关系管理风格，看上去更像Java的Maven。项目编译和打包、依赖关系的解决都可以很轻松的实现。再也不用费神去寻找或者更新第三方库，或者将他们集成到一起。这一切全部都可以交给Composer来完成。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>首先来看一个类似于Helloworld的例子，让我们对Composer先有一个感性的认识吧。</p>
<p>如何在一个PHP项目中启用Composer，很简单，只需要在项目根目录中创建一个composer.json文件即可，它包含如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;require&quot;: &#123;</div><div class="line">	        &quot;monolog/monolog&quot;: &quot;1.2.*&quot;</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们便添加了对monolog这个库的引用。没错，就是这样简单。不过，你还需要使用composer来为你更新依赖包，打开你的Shell，切换到项目目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer install</div></pre></td></tr></table></figure></p>
<p>这时，Composer便自动从互联网上更新指定依赖的库了。你会发现你的项目文件夹里面多了一个vendor文件夹，那就是依赖库包了。</p>
<p>接下来，你需要在你的系统的公共入口文件中引用自动加载器，以便自动加载类：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</div></pre></td></tr></table></figure></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>上面的例子让大家对composer的使用有了一个大概的认识。下面将向大家介绍如何在PHP环境中安装composer。<br>Unix/Linux/OSX环境</p>
<p>很幸运，利用Unix Like环境安装composer是一件很简单的事情。只需要一行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure></p>
<p>此时会为你在当前工作目录安装composer.phar文件，使用php composer.phar即可运行。当然，你可能更想让composer变成像其他一样的Unix命令，很简单，只需要再加一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure></p>
<p>注意，在权限受限的系统上，你可能需要使用sudo命令来提升至管理员账号执行。</p>
<p>这时，你就可以像例子里面那样使用composer了。<br>Windows环境</p>
<p>Composer官方推荐使用安装包进行安装，据说下载Composer-Setup.exe这个即可用向导模式安装。</p>
<p>关于手工安装的方法，请参考<a href="http://getcomposer.org/doc/00-intro.md的介绍吧。" target="_blank" rel="external">http://getcomposer.org/doc/00-intro.md的介绍吧。</a></p>
<h4 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h4><p>为了实现PHP类的随取随用，类的命名空间定义建议遵从一定的规则。这种规则可以是某一项目组约定的。不过为了使得类库统一，PHP-FIG项目指 定了一种PHP命名空间的规范PSR-0，被一些流行PHP项目采用。Composer支持这种规范的类库自动装载器，只需要向 composer.json文件中添加autoload节点即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	    &quot;autoload&quot;: &#123;</div><div class="line">	        &quot;psr-0&quot;: &#123;&quot;Acme\\&quot;: &quot;src/&quot;&#125;</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于PSR-0规范，有这么几点重要的要求：</p>
<ul>
<li>命名空间规范参考：\<vendor name="">(<namespace>)*<class name=""></class></namespace></vendor></li>
<li>每个namespace需要一个顶层空间，即vendor name。用来指定在软件包级别上区别。</li>
<li>命名空间和PHP文件的路径是一一对应的，最终命名空间分隔符会被转为DIRECTORY_SEPARATOR</li>
<li>文件名必须为类名.php</li>
</ul>
<p>关于这个规范，可以参考<a href="http://blog.mosil.biz/2012/08/psr-0-autoloading-standard/这篇文章。有关PSR-0的更多内容，可以参考他们的官方网站：https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md" target="_blank" rel="external">http://blog.mosil.biz/2012/08/psr-0-autoloading-standard/这篇文章。有关PSR-0的更多内容，可以参考他们的官方网站：https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md</a></p>
<p>注意，修改了autoload后，要重新使用composer install。</p>
<p>注意：composer默认类库是使用PSR-0规范自动加载的。所以一般无需额外配置。</p>
<h4 id="查找所需类库"><a href="#查找所需类库" class="headerlink" title="查找所需类库"></a>查找所需类库</h4><p>composer提供了一个类库的“商店”，在这里，你可以立即找到想要使用的开源类库包，然后把他们添加到你的项目中即可。传送门：<a href="https://packagist.org/" target="_blank" rel="external">https://packagist.org/</a></p>
<h4 id="打包自己的类库"><a href="#打包自己的类库" class="headerlink" title="打包自己的类库"></a>打包自己的类库</h4><p>将自己的类库贡献给大家，首先需要为自己的类库设置打包信息（要首先保证自己的类库是利用composer管理的）。在composer.json文件中设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;your-vendor-name/package-name&quot;,</div><div class="line">    &quot;require&quot;: &#123;</div><div class="line">        &quot;php&quot;: &quot;&gt;=5.3.0&quot;,</div><div class="line">        &quot;another-vendor/package&quot;: &quot;1.*&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后就可以前去<a href="https://packagist.org/提交你的类库了。" target="_blank" rel="external">https://packagist.org/提交你的类库了。</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">快速入门</a></li>
<li><a href="http://getcomposer.org/doc/" target="_blank" rel="external">文档</a></li>
<li><a href="https://packagist.org/" target="_blank" rel="external">包列表</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Composer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Composer </tag>
            
            <tag> Php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell – 正则表达式]]></title>
      <url>/2017/07/21/Shell-%E2%80%93-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="正则表达式的分类"><a href="#正则表达式的分类" class="headerlink" title="正则表达式的分类"></a>正则表达式的分类</h4><ul>
<li>基本的正则表达式（Basic Regular Expression 又叫Basic RegEx 简称BREs）</li>
<li>扩展的正则表达式（Extended Regular Expression 又叫Extended RegEx 简称EREs）</li>
<li>Perl的正则表达式（Perl Regular Expression 又叫Perl RegEx 简称PREs）</li>
</ul>
<h4 id="基本组成部分"><a href="#基本组成部分" class="headerlink" title="基本组成部分"></a>基本组成部分</h4><p>正则表达式的基本组成部分。</p>
<p><img src="WX20170517-1442082x.png" alt="image"></p>
<h4 id="POSIX字符类"><a href="#POSIX字符类" class="headerlink" title="POSIX字符类"></a>POSIX字符类</h4><p>POSIX字符类是一个形如[:…:]的特殊元序列（meta sequence），他可以用于匹配特定的字符范围。</p>
<p><img src="WX20170517-1440442x.png" alt="image"></p>
<h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>元字符（meta character）是一种Perl风格的正则表达式，只有一部分文本处理工具支持它，并不是所有的文本处理工具都支持。</p>
<p><img src="WX20170517-1443312x.png" alt="image"></p>
<p>文章来源：<a href="http://man.linuxde.net/docs/shell_regex.html" target="_blank" rel="external">http://man.linuxde.net/docs/shell_regex.html</a> </p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Shell </tag>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git – 操作配置别名]]></title>
      <url>/2017/07/21/Git-%E2%80%93-%E6%93%8D%E4%BD%9C%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>有没有经常敲错命令？比如Git status？status这个单词真心不好记。</p>
<p>如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p>
<p>我们只需要敲一行命令，告诉Git，以后st就表示status：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.st status</div></pre></td></tr></table></figure></p>
<p>好了，现在敲git st看看效果。</p>
<p>当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.co checkout</div><div class="line">$ git config --global alias.ci commit</div><div class="line">$ git config --global alias.br branch</div></pre></td></tr></table></figure></p>
<p>以后提交就可以简写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git ci -m &quot;bala bala bala...&quot;</div></pre></td></tr></table></figure></p>
<p>–global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>
<p>在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.unstage &apos;reset HEAD&apos;</div></pre></td></tr></table></figure></p>
<p>当你敲入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git unstage test.py</div></pre></td></tr></table></figure></p>
<p>实际上Git执行的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD test.py</div></pre></td></tr></table></figure></p>
<p>配置一个git last，让其显示最后一次提交信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.last &apos;log -1&apos;</div></pre></td></tr></table></figure></p>
<p>这样，用git last就能显示最近一次的提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git last</div><div class="line">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</div><div class="line">Merge: bd6ae48 291bea8</div><div class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</div><div class="line">Date:   Thu Aug 22 22:49:22 2013 +0800</div><div class="line"></div><div class="line">merge &amp; fix hello.py</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> 别名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell – Grep 常见用法]]></title>
      <url>/2017/07/21/Shell-%E2%80%93-Grep%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。<br>我经常用来查找字符串比如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -rn "字符串" .</div></pre></td></tr></table></figure>
<p>递归查找当前目录下所有文件中 “字符串” 并且所在标出所在行。</p>
<p>下面来看看具体参数：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">grep [-acinv] [--color=auto] '搜寻字符串' filename 选项参数:</div><div class="line">-a :将 binary 档案以 text 档案方式搜寻数据</div><div class="line">-c :计算找刡 '搜寻字符串' 次数</div><div class="line">-i :忽略大小写</div><div class="line">-n :输出行号</div><div class="line">-v :反向选择，亦即显示出没有 '搜寻字符串' 内容癿那一行! --color=auto :可以将找刡癿关键词部分加上颜色癿显示!</div><div class="line">-A :后面可加数字，为 after 癿意思，除了列出该行外，后续的 n 行也列出; </div><div class="line">-B :后面可加数字，为 befer 癿意思，除了列出该行外，前面的 n 行也列出;</div></pre></td></tr></table></figure></p>
<p>grep 只支持基础正则表示法，若要延伸型正则，则要用egrep或者  grep -E。</p>
<p>基础正则表示法总结如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">^word：查找字符串(word)在行首  grep -n '^word' filename</div><div class="line"><span class="meta">word$</span>:  查找字符串(word)在行末  grep -n 'word$' filename</div><div class="line">. : 任意字符</div><div class="line">\ : 转译</div><div class="line">*：前面字符 0 到 任意多个</div><div class="line">[] : 字符集合</div><div class="line">[n1-n2] : 范围  如[0-9]</div><div class="line">[^]: 字符取反，就是不能是里面的字符</div><div class="line">\&#123;n,m\&#125;: 出现n到m次</div></pre></td></tr></table></figure>
<p>延伸正则表示总结如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+  ：一个或者一个以上</div><div class="line">？ ：零个或者一个</div><div class="line">|   ： 或</div><div class="line">()  :  群组   egrep -n 'g(la|oo)d' filename  找出 glad 或者 good 两个字符串</div><div class="line">()+:  群组出现一次或者多次</div></pre></td></tr></table></figure>
<p>grep 还有很多高级用法，请感兴趣的自己去补给，我只列出了基础的常见的用法。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Grep </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git – 集中式与分布式]]></title>
      <url>/2017/07/21/Git-%E2%80%93-%E9%9B%86%E4%B8%AD%E5%BC%8F%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h4 id="Git-–-集中式与分布式-版本控制系统区别"><a href="#Git-–-集中式与分布式-版本控制系统区别" class="headerlink" title="Git – 集中式与分布式 版本控制系统区别"></a>Git – 集中式与分布式 版本控制系统区别</h4><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p>
<p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而大家工作的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始工作，工作完成，再把自己的修订推送给中央服务器。这类系统，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p>
<p><img src="git1.png" alt=""></p>
<p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<p><img src="userid1labid485time1423115040073.png" alt=""></p>
<p>许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> 集中式管理 </tag>
            
            <tag> 分布式管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git – 全局与局部项目配置]]></title>
      <url>/2017/07/21/Git-%E2%80%93-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B1%80%E9%83%A8%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="Git全局配置的文件"><a href="#Git全局配置的文件" class="headerlink" title="Git全局配置的文件"></a>Git全局配置的文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.gitconfig</div></pre></td></tr></table></figure>
<p>上面就是全局配置文件位置。</p>
<p>git config –global &lt;配置名称&gt; &lt;配置的值&gt;  例如：</p>
<p>$ git config –global user.name “用户名”<br>$ git config –global user.email “邮箱”</p>
<h4 id="Git局部项目的配置文件"><a href="#Git局部项目的配置文件" class="headerlink" title="Git局部项目的配置文件"></a>Git局部项目的配置文件</h4><p>你可以在项目中使用git config 命令不带 –global 选项来设置. 这会在你当前的项目目录下创建 .git/config，从而使用针对当前项目的配置。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git – 基本工作流程]]></title>
      <url>/2017/07/21/Git-%E2%80%93-%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>git的基本流程如下：</p>
<h4 id="首先获取项目"><a href="#首先获取项目" class="headerlink" title="首先获取项目"></a>首先获取项目</h4><p>为了得一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Git URL). Git能在许多协议下使用，所以Git URL可能以ssh://, http(s)://, git://. 有些仓库可以通过不只一种协议来访问。</p>
<p>例如ssh方式获取远程你在阿里云下的项目：git clone git@code.aliyun.com:username/xxxx(项目).git</p>
<p>另一种方式是还没有仓库，我们要把当前文件夹设为项目仓库 ：git init  </p>
<p>在当前目录下就会有 .git 的文件夹了。</p>
<h4 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h4><ul>
<li>创建或修改文件</li>
<li>使用git add命令添加新创建或修改的文件到本地的缓存区（Index）</li>
<li>使用git commit命令提交到本地代码库</li>
<li>（可选，有的时候并没有可以同步的远端代码库）使用git push命令将本地代码库同步到远端代码库</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Es – 安装插件]]></title>
      <url>/2017/07/21/Elasticsearch-%E2%80%93-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>由于Elasticsearch-head 插件不支持5.3.0，比较费事，装个低版本的，安装个插件。</p>
<p>来看下 2.3.0 插件安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./plugin install mobz/elasticsearch-head</div><div class="line"></div><div class="line">http://localhost:9200/_plugin/head</div></pre></td></tr></table></figure></p>
<p>安装 bigdesk 集群管理插件。</p>
<p>bigdesk是elasticsearch的一个集群监控工具，可以通过它来查看es集群的各种状态，如：cpu、内存使用情况，索引数据、搜索情况，http连接数等。项目git地址： <a href="https://github.com/lukas-vlcek/bigdesk。和head一样，它也是个独立的网页程序，使用方式和head一样。" target="_blank" rel="external">https://github.com/lukas-vlcek/bigdesk。和head一样，它也是个独立的网页程序，使用方式和head一样。</a></p>
<p>1.下载bigdesk插件，bigdesk-master.zip。</p>
<p>2.复制到 es plugins 插件目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp bigdesk-master.zip  elasticsearch-2.3.0/plugins</div></pre></td></tr></table></figure></p>
<p>3.解压 删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unzip bigdesk-master.zip </div><div class="line"></div><div class="line">rm -rf bigdesk-master.zip</div></pre></td></tr></table></figure></p>
<p>4.创建 _site 文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd bigdesk-master</div><div class="line">mkdir _site</div></pre></td></tr></table></figure></p>
<p>将 bigdesk-master 下刚刚解压的文件移动到 _site 下面。</p>
<p>4.创建 plugin-descriptor.properties 文件</p>
<p>添加一下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">description=bigdesk</div><div class="line">version=bigdesk</div><div class="line">name=bigdesk</div><div class="line">site=true</div></pre></td></tr></table></figure>
<p>5.修改js文件。</p>
<p>定位到plugins/bigdesk/_site/js/store目录，打开BigdeskStore.js，定位到142行</p>
<p>把 major ==1 改成 major &gt;=1，然后保存</p>
<p>6.搞定，浏览器查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:9200/_plugin/bigdesk-master/#nodes</div></pre></td></tr></table></figure></p>
<p>最后附上我的目录结构：</p>
<p><img src="E9B80FA8-56F0-49DE-85E0-129215E63B28.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Es </tag>
            
            <tag> Ik </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Es - 单机多节点集群]]></title>
      <url>/2017/07/21/Elasticsearch-%E2%80%93-%E5%8D%95%E6%9C%BA%E5%A4%9A%E8%8A%82%E7%82%B9%E9%9B%86%E7%BE%A4/</url>
      <content type="html"><![CDATA[<h4 id="采用版本"><a href="#采用版本" class="headerlink" title="采用版本"></a>采用版本</h4><p>1.物理机 Mac</p>
<p>2.Elasticsearch 2.3.0</p>
<p>3.插件：head，bigdesk</p>
<p>4.部署4个节点：2个数据节点，1个主节点，1个备用主节点</p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>请到 GitHub 下载 ES 2.3.0 版本</p>
<p><a href="https://github.com/elastic/elasticsearch/tree/v2.3.0" target="_blank" rel="external">https://github.com/elastic/elasticsearch/tree/v2.3.0</a></p>
<h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><p>请根据自己部署软件的习惯解压到合适目录，下面是我的本机目录：</p>
<p>/Users/zhen/opt/es-cloud-2.3.0</p>
<p>es-cloud-2.3.0 文件夹放置的单机的4个节点目录，附上我的目录结构：</p>
<p><img src="WX20170509-2323572x.png" alt="image"></p>
<p>从图中大家也了解了，其实就是复制出4份来，只不过每个ES里面的配置不一样。</p>
<p>插件安装前面已经介绍过了，请看 这里 ，可以先安装master的插件，安转完成再复制就好了。</p>
<h5 id="各个节点的配置"><a href="#各个节点的配置" class="headerlink" title="各个节点的配置"></a>各个节点的配置</h5><p>主节点master：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: master</div><div class="line">node.master: true</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: false</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9200</div><div class="line">transport.tcp.port: 9300</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<p>数据节点data-1：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: data-1</div><div class="line">node.master: false</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: true</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9201</div><div class="line">transport.tcp.port: 9301</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<p>数据节点data-2：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: data-2</div><div class="line">node.master: false</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: true</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9202</div><div class="line">transport.tcp.port: 9302</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<p>备用主节点：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: client-1</div><div class="line">node.master: true</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: false</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9203</div><div class="line">transport.tcp.port: 9303</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>启动节点，写到脚本里面执行，不用一条条的运行了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">./es-node-master/bin/elasticsearch -d</div><div class="line"></div><div class="line">./es-node-data-1/bin/elasticsearch -d</div><div class="line"></div><div class="line">./es-node-data-2/bin/elasticsearch -d</div><div class="line"></div><div class="line">./es-node-client/bin/elasticsearch -d</div></pre></td></tr></table></figure>
<h5 id="查看集群状态："><a href="#查看集群状态：" class="headerlink" title="查看集群状态："></a>查看集群状态：</h5><p><img src="WX20170509-224809zhu.png" alt="image"></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>假如我们挂掉主节点，再来看看我们的集群状态。</p>
<p><img src="WX20170509-2250282x.png" alt="image"></p>
<p>当我们挂掉了master，访问任意一个节点的head插件，来看集群状态。选举了client-1为主节点。</p>
<p>最后附上bigdesk的截图：</p>
<p><img src="2A230B92-4278-4C3D-8001-19CB858086AD.jpg" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Es </tag>
            
            <tag> Ik </tag>
            
            <tag> 集群 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven - Mac 安装]]></title>
      <url>/2017/07/21/Maven-Mac-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>1.下载maven</p>
<p><a href="http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.zip" target="_blank" rel="external">http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.zip</a></p>
<p>2.解压</p>
<p>unzip apache-maven-3.5.0-bin.zip</p>
<p>如果是tar.gz包</p>
<p>tar xzvf apache-maven-3.5.0-bin.tar.gz</p>
<p>3.配置环境变量</p>
<p>vim ~/.bash_profile</p>
<p>添加路径：</p>
<p>export PATH=/路径/apache-maven-3.5.0/bin:$PATH</p>
<p>4.查看</p>
<p>mvn -version</p>
<p>官方install地址：<a href="http://maven.apache.org/install.html" target="_blank" rel="external">http://maven.apache.org/install.html</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Maven </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 优先级队列]]></title>
      <url>/2017/07/21/Python-%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>优先级队列是一种容器型数据结构，它能管理一队记录，并按照排序字段（例如一个数字类型的权重值）为其排序。由于是排序的，所以在优先级队列中你可以快速获取到最大的和最小的值。<br><a id="more"></a><br>你可以认为优先级队列是一种修改过的普通队列：普通队列依据记录插入的时间来获取下一个记录，优先级队列依据优先级来获取下一个记录，而优先级取决于排序字段的值。</p>
<p>优先级队列经常用来解决调度问题，比如给更紧急的任务更高的优先级。</p>
<p>我们以操作系统的任务调度为例：高优先级的任务（比如实时游戏）应该先于低优先级的任务（比如后台下载软件更新）执行。通过在优先级队列中依据任务的紧急程度排序，我们能让最紧急的任务优先得到执行。</p>
<p>queue.PriorityQueue类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Queue</div><div class="line"></div><div class="line">q = Queue.PriorityQueue()</div><div class="line"></div><div class="line">q.put((<span class="number">2</span>,<span class="string">'code'</span>))</div><div class="line">q.put((<span class="number">1</span>,<span class="string">'eat'</span>))</div><div class="line">q.put((<span class="number">3</span>,<span class="string">'sleep'</span>))</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</div><div class="line">	next_item = q.get()</div><div class="line">	print(next_item)</div><div class="line"></div><div class="line"><span class="comment"># Result</span></div><div class="line"><span class="comment"># (1,'eat')</span></div><div class="line"><span class="comment"># (2, 'code')</span></div><div class="line"><span class="comment"># (3, 'sleep')</span></div></pre></td></tr></table></figure>
<p>这个优先级队列内部使用了heapq，所以它的时间复杂度和heapq是相同的。</p>
<p>不同的是PriorityQueue的操作是同步的，提供锁操作，支持并发的生产者和消费者。</p>
<p>依据使用场景，它可能很有用，也可能有点太大了。通常来说它的基于类接口要比heapq的基于函数的接口更友好。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 队列 </tag>
            
            <tag> 优先级队列 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo – 'Deployer not found']]></title>
      <url>/2017/07/21/Hexo-%E2%80%93-Deployer-not-found/</url>
      <content type="html"><![CDATA[<p>重新部署了Hexo，结果无法部署，解决方法如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Es – 集群生态总结]]></title>
      <url>/2017/07/20/Elasticsearch-%E2%80%93-%E9%9B%86%E7%BE%A4%E7%94%9F%E6%80%81%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="分片算法"><a href="#分片算法" class="headerlink" title="分片算法:"></a>分片算法:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shard = hash(routing) % number_of_primary_shards</div></pre></td></tr></table></figure>
<p>routing值是一个任意字符串，它默认是_id但也可以自定义，这个routing字符串通过哈希函数生成一个数字，然后除以主切片的数量得到一个余数(remainder)，余数的范围永远是0到number_of_primary_shards – 1，这个数字就是特定文档所在的分片。</p>
<p>这也解释了为什么主切片的数量只能在创建索引时定义且不能修改：如果主切片的数量在未来改变了，所有先前的路由值就失效了，文档也就永远找不到了。</p>
<p>所有的文档API（get、index、delete、bulk、update、mget）都接收一个routing参数，它用来自定义文档到分片的映射。自定义路由值可以确保所有相关文档.比如用户的文章,按照用户账号路由,就可以实现属于同一用户的文档被保存在同一分片上。</p>
<h4 id="增删改（write）执行过程"><a href="#增删改（write）执行过程" class="headerlink" title="增删改（write）执行过程"></a>增删改（write）执行过程</h4><p>不管是索引，还是文档的write操作，它们必须在主分片上成功完成才能复制到相关的复制分片上,下面我们罗列在主分片和复制分片上成功新建、索引或删除一个文档必要的顺序步骤：</p>
<p>1、客户端给Node 1发送新建、索引或删除请求。</p>
<p>2、节点使用文档的_id确定文档属于分片0。它转发请求到Node 3，分片0位于这个节点上。</p>
<p>3、Node 3在主分片上执行请求，如果成功，它转发请求到相应的位于Node 1和Node 2的复制节点上。当所有的复制节点报告成功，Node 3报告成功到请求的节点，请求的节点再报告给客户端。</p>
<p>客户端接收到成功响应的时候，文档的修改已经被应用于主分片和所有的复制分片。你的修改生效了。</p>
<h4 id="副本分片复制时的相关的参数说明"><a href="#副本分片复制时的相关的参数说明" class="headerlink" title="副本分片复制时的相关的参数说明:"></a>副本分片复制时的相关的参数说明:</h4><p>replication:</p>
<p>复制默认的值是sync。这将导致主分片得到复制分片的成功响应后才返回，如果你设置replication为async，请求在主分片上被执行后就会返回给客户端。它依旧会转发请求给复制节点，但你将不知道复制节点成功与否。</p>
<p>默认的sync复制允许Elasticsearch强制反馈传输。async复制可能会因为在不等待其它分片就绪的情况下发送过多的请求而使Elasticsearch过载。</p>
<p>consistency:</p>
<p>默认主分片在尝试写入时需要<strong>规定数量(quorum)</strong>或过半的分片（可以是主节点或复制节点）可用。这是防止数据被写入到错的网络分区。规定的数量计算公式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int( (primary + number_of_replicas) / 2 ) + 1</div></pre></td></tr></table></figure></p>
<p>consistency允许的值为one（只有一个主分片），all（所有主分片和复制分片）或者默认的quorum或过半分片。</p>
<p>注意number_of_replicas是在索引中的的设置，用来定义复制分片的数量，而不是现在活动的复制节点的数量。如果你定义了索引有3个复制节点，那规定数量是：int( (primary + 3 replicas) / 2 ) + 1 = 3</p>
<p>但如果你只有2个节点，那你的活动分片不够规定数量，也就不能索引或删除任何文档。</p>
<p>注意: 新索引默认有1个复制分片，这意味着为了满足quorum的要求<strong>需要</strong>两个活动的分片。当然，这个默认设置将阻止我们在单一节点集群中进行操作。为了避开这个问题，规定数量只有在number_of_replicas大于一时才生效。</p>
<p>timeout：</p>
<p>当分片副本不足时Elasticsearch会等待更多的分片出现。默认等待一分钟。如果需要，你可以设置timeout参数让它终止的更早：100表示100毫秒，30s表示30秒。</p>
<h4 id="集群生态"><a href="#集群生态" class="headerlink" title="集群生态:"></a>集群生态:</h4><p>1.同集群中节点之间可以扩容缩容,</p>
<p>2.主分片的数量会在其索引创建完成后修正，但是副本分片的数量会随时变化。</p>
<p>3.相同的分片不会放在同一个节点上.</p>
<h4 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康:"></a>集群健康:</h4><p>在Elasticsearch集群中可以监控统计很多信息，但是只有一个是最重要的时集群健康(cluster health)。Es中用三种颜色状态表示:green，yellow，red.</p>
<p>Green：所有主分片和副本分片都可用</p>
<p>Yellow：所有主分片可用，但不是所有副本分片都可用</p>
<p>Red：不是所有的主分片都可用；</p>
<h4 id="单机多节点来了解ES的高可用"><a href="#单机多节点来了解ES的高可用" class="headerlink" title="单机多节点来了解ES的高可用"></a>单机多节点来了解ES的高可用</h4><h5 id="创建单集群节点"><a href="#创建单集群节点" class="headerlink" title="创建单集群节点"></a>创建单集群节点</h5><p>如图我们的单点集群:<br><img src="301445145908370.png" alt="es-node1"></p>
<p>实例中我们创建一个索引dobbyindex.一个索引默认指派5个主分片,实例中我们设定4个主分片和2个复制分片（每个主分片有2个复制分片对应）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PUT /dobbyindex</div><div class="line">&#123;</div><div class="line">  &quot;settings&quot;: &#123;</div><div class="line">    &quot;number_of_shards&quot;: 4,</div><div class="line">    &quot;number_of_replicas&quot;: 2</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建后索引如图:</p>
<p><img src="301447481842914.png" alt="image"></p>
<p>在节点es-node1中片的存放如下:</p>
<p><img src="301448224189287.png" alt="image"></p>
<p>我们的主分片都被分配到了es-node1.但是我们的8个复制分片还没有被分配到节点上, 此时的集群健康状况如下:</p>
<p>cluster health: yellow (4 of 12)<br>对应的详细信息为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;cluster_name&quot;: &quot;elasticsearch-cluster-centos&quot;,</div><div class="line">    &quot;status&quot;: &quot;yellow&quot;,</div><div class="line">    &quot;timed_out&quot;: false,</div><div class="line">    &quot;number_of_nodes&quot;: 1,</div><div class="line">    &quot;number_of_data_nodes&quot;: 1,</div><div class="line">    &quot;active_primary_shards&quot;: 4,</div><div class="line">    &quot;active_shards&quot;: 4,</div><div class="line">    &quot;relocating_shards&quot;: 0,</div><div class="line">    &quot;initializing_shards&quot;: 0,</div><div class="line">    &quot;unassigned_shards&quot;: 8</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>意味着所有的主分片(primary shards)启动并且运行了,集群已经可以成功的接受任意请求,但是副本分片(replica shards)还没有全部可用。<br>事实上所有的8个副本分片现在是unassigned（未分配）状态,即它们还未被分配给节点,在同一个节点上保存相同的数据副本是没有必要的，如果这个节点故障了，那所有的数据副本也会丢失。现在我们的集群已经功能完备，但是依旧存在因硬件故障而导致的数据丢失的风险。</p>
<h5 id="增加故障转移"><a href="#增加故障转移" class="headerlink" title="增加故障转移"></a>增加故障转移</h5><p>上面实例中的集群有单点故障的风险,没有数据冗余备份。我们可以扩展节点来保护数据不被丢失.只要第二个节点与第一个节点有相同的cluster.name(实例中为elasticsearch-cluster-centos)，它就能自动发现并加入第一个节点的集群。</p>
<p>如果没有，检查日志找出哪里出了问题。这可能是网络广播被禁用，或者防火墙阻止了节点通信。</p>
<p>当我们启动第二个节点之后:集群中的分片结构图如下:</p>
<p><img src="301450312776822.png" alt="image"></p>
<p>虽然,已经有4个副本分片被分陪到es-node2节点上来了，但是按照我们定义的副本分片的值为2, 还有4个分片处于未分片状态,此时对于我们设定的参数来说,集群的健康值还是所有主分片可用，但不是所有复制分片都可用. 对应的集群健康状况:</p>
<p>cluster health: yellow (8 of 12)</p>
<p>对应的详细信息为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;cluster_name&quot;: &quot;elasticsearch-cluster-centos&quot;,</div><div class="line">    &quot;status&quot;: &quot;yellow&quot;,</div><div class="line">    &quot;timed_out&quot;: false,</div><div class="line">    &quot;number_of_nodes&quot;: 2,</div><div class="line">    &quot;number_of_data_nodes&quot;: 2,</div><div class="line">    &quot;active_primary_shards&quot;: 4,</div><div class="line">    &quot;active_shards&quot;: 8,</div><div class="line">    &quot;relocating_shards&quot;: 0,</div><div class="line">    &quot;initializing_shards&quot;: 0,</div><div class="line">    &quot;unassigned_shards&quot;: 4</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以我们还需要一个节点来分片这些副本分片,使集群达到高可用,再增加集群节点:</p>
<p><img src="301452193242213.png" alt="image"></p>
<p>当我们启动第三个节点之后,整个集群上的分片都进行了有效分配,从图中可以看出.es-node1为这个集群生态中选举出来的主(master),es-node2和es-node3为集群生态中的slave(从). 这样,一些新的被索引的文档将首先被存储在主分片中，然后平行复制到关联的复制节点上。这可以确保我们的数据在主节点和复制节点上都可以被检索。</p>
<p>此时集群的健康状态如下：</p>
<p>cluster health: green (12 of 12)<br>对应的详细信息为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;cluster_name&quot;: &quot;elasticsearch-cluster-centos&quot;,</div><div class="line">    &quot;status&quot;: &quot;green&quot;,</div><div class="line">    &quot;timed_out&quot;: false,</div><div class="line">    &quot;number_of_nodes&quot;: 3,</div><div class="line">    &quot;number_of_data_nodes&quot;: 3,</div><div class="line">    &quot;active_primary_shards&quot;: 4,</div><div class="line">    &quot;active_shards&quot;: 12,</div><div class="line">    &quot;relocating_shards&quot;: 0,</div><div class="line">    &quot;initializing_shards&quot;: 0,</div><div class="line">    &quot;unassigned_shards&quot;: 0</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下图为,节点es-node3加入时,分片分配过程中截取的临时图.</p>
<p><img src="301453316066030.png" alt="image"></p>
<h5 id="模拟节点宕机-集群主从重新选举"><a href="#模拟节点宕机-集群主从重新选举" class="headerlink" title="模拟节点宕机,集群主从重新选举"></a>模拟节点宕机,集群主从重新选举</h5><p>上图中我们的主节点为es-node1,如果主节点宕掉后,会怎样呢.</p>
<p><img src="301454200908450.png" alt="image"></p>
<p>如图:主节点对应的进程号7421,干掉它，此时es集群生态发生了如下变化,如图:</p>
<p><img src="301455187779322.png" alt="image"></p>
<p>es-node3被选举为主节点,es-node2为从节点,主分片与副本分片也变化了,主分片放置在了es-node2上,副本分片放置到了es-node3上,因为分片没有完全被分配,所以集群的健康状态变为yellow(所有主分片可用，但不是所有复制分片都可用),然后我们重启es-node1节点.</p>
<p><img src="301455447626616.png" alt="image"></p>
<p>如图,重启后健康状态恢复到green,但是集群主从变化了,且主分片的位置也变化了.</p>
<h5 id="模拟扩展节点"><a href="#模拟扩展节点" class="headerlink" title="模拟扩展节点"></a>模拟扩展节点</h5><p><img src="301456308712196.png" alt="iamge"></p>
<p>实例2中我们的集群已经达到高可用状态,对应的索引分片如图.此时我们想要扩展集群继续增加节点时,我们的分片会怎样呢,接下来我们再增加一个扩展节点es-node4.</p>
<p><img src="301457315278966.png" alt="iamge"></p>
<p>如图:扩容后,可以看到片进行了重新分片,节点es-node1和es-node3上分别持有主分片。es-node2,es-node3,es-node4持有副本分片，由于笔者模拟过程中有主节点宕机操作,</p>
<p>所以从图中可以看出,新的生态集群中es-node4为主节点.对应的各个集群存储中包含的片分布信息如下:</p>
<p><img src="301458043873327.png" alt="iamge"></p>
<p>这种状态下的片也是完全分配，green(所有主要和复制的分片都可用).</p>
<h5 id="动态缩小或者扩容副本片数量"><a href="#动态缩小或者扩容副本片数量" class="headerlink" title="动态缩小或者扩容副本片数量"></a>动态缩小或者扩容副本片数量</h5><p>副本节点的数量可以在运行中的集群中动态的变更，这允许我们可以根据需求扩大或者缩小规模。</p>
<p>比如我们执行一次缩小规模操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PUT /dobbyindex/_settings</div><div class="line">&#123;</div><div class="line">   &quot;number_of_replicas&quot; : 1</div><div class="line">&#125;</div><div class="line">执行结果返回:</div><div class="line">&#123;</div><div class="line">    &quot;acknowledged&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时,我们看到片的信息分又重新做了调整: 主分片分布在节点es-node1,es-node3,es-node4上.从分片分布在es-node2,es-node3,es-node4上.</p>
<p><img src="301459413712397.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Es </tag>
            
            <tag> 集群 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Es – 倒排索引]]></title>
      <url>/2017/07/20/Elasticsearch-%E2%80%93-%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<h4 id="Lucene-简介"><a href="#Lucene-简介" class="headerlink" title="Lucene 简介"></a>Lucene 简介</h4><p>Lucene是Apache软件基金会中一个开放源代码的全文搜索引擎工具包，是一个全文搜索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文搜索引擎。<br>Lucene最初是由Doug Cutting所撰写的，是一位资深全文索引/搜索专家，曾经是V-Twin搜索引擎的主要开发者，后来在Excite担任高级系统架构设计师，目前从事于一些Internet底层架构的研究。</p>
<h4 id="Lucene-采用倒排索引"><a href="#Lucene-采用倒排索引" class="headerlink" title="Lucene 采用倒排索引"></a>Lucene 采用倒排索引</h4><p>倒排索引源于实际应用中需要根据属性的值来查找记录。</p>
<p>这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引（inverted index）。带有倒排索引的文件我们称为倒排索引文件，简称倒排文件（inverted file）。</p>
<h4 id="Lucene-如何构建倒排索引"><a href="#Lucene-如何构建倒排索引" class="headerlink" title="Lucene 如何构建倒排索引"></a>Lucene 如何构建倒排索引</h4><h5 id="1-获取关键词"><a href="#1-获取关键词" class="headerlink" title="1.获取关键词"></a>1.获取关键词</h5><p>由于倒排序是根据关键字索引来定位记录的，所以要先获取关键词。比如一篇文章，也就是一串字符串，要获取所有的分词（关键字），如果是英文字符串也就是所有单词，中文则依赖中文分词器来获取所有词语，然而不管英文还是中文有些词是无意义的比如“is”，“in”，“的”等等过滤掉，标点符号过滤掉，大小写统一，等等经过一系列的过滤筛选后得到分词，也就是我们的关键字。</p>
<p>例子：</p>
<p>假设有两篇文章1和文章2：</p>
<p>文章1的内容为：Tom lives in Guangzhou，I live in Guangzhou too.<br>文章2的内容为：He once lived in Shanghai.</p>
<p>在Lucene中以上措施由Analyzer类完成分词处理，结果如下：</p>
<p>文章1的所有关键词为：[tom][live][guangzhou][i][live][guangzhou]<br>文章2的所有关键词为：[he][live][shanghai]</p>
<h5 id="2-建立倒排索引"><a href="#2-建立倒排索引" class="headerlink" title="2.建立倒排索引"></a>2.建立倒排索引</h5><p>有了关键词后，我们就可以建立倒排索引了。上面的对应关系是：“文章号”对“文章中所有关键词”。倒排索引把这个关系倒过来，变成：“关键词”对“拥有该关键词的所有文章号”。</p>
<p><img src="QQ20170424-232025.png" alt="倒排序"></p>
<p>通常仅知道关键词在哪些文章中出现还不够，我们还需要知道关键词在文章中出现的次数和位置，加上位置与出现次数后如下：</p>
<p><img src="QQ20170424-2324182x.png" alt="倒排序"></p>
<p>以上就是Lucene索引结构中最核心的部分。我们注意到关键字是按字符顺序排列的（Lucene没有使用B树结构），因此Lucene可以用二元搜索算法快速定位关键词。</p>
<h5 id="3-实现倒排索引"><a href="#3-实现倒排索引" class="headerlink" title="3.实现倒排索引"></a>3.实现倒排索引</h5><p>实现时，Lucene将上面三列分别作为词典文件（Term Dictionary）、频率文件（frequencies）、位置文件（positions）保存。其中词典文件不仅保存了每个关键词，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。<br>Lucene中使用了field的概念，用于表达信息所在位置（如标题中、文章中、URL中），在建索引中，该field信息也记录在词典文件中，每个关键词都有一个field信息，因为每个关键字一定属于一个或多个field。</p>
<h5 id="4-压缩算法"><a href="#4-压缩算法" class="headerlink" title="4.压缩算法"></a>4.压缩算法</h5><p>为了减小索引文件的大小，Lucene对索引还使用了压缩技术。<br>首先，对词典文件中的关键词进行了压缩，关键词压缩为&lt;前缀长度，后缀&gt;，例如：当前词为“阿拉伯语”，上一个词为“阿拉伯”，那么“阿拉伯语”压缩为<3，语>。<br>其次大量用到的是对数字的压缩，数字只保存与上一个值的差值（这样可以减少数字的长度，进而减少保存该数字需要的字节数）。例如当前文章号是16389（不压缩要用3个字节保存），上一文章号是16382，压缩后保存7（只用一个字节）。</3，语></p>
<h5 id="5-查询"><a href="#5-查询" class="headerlink" title="5.查询"></a>5.查询</h5><p>假设要查询单词“live”，Lucene先对词典二元查找、找到该词，通过指向频率文件的指针读出所有文章号，然后返回结果。词典通常非常小，因而，整个过程的时间是毫秒级的。<br>而用普通的顺序匹配算法，不建索引，而是对所有文章的内容进行字符串匹配，这个过程将会相当缓慢，当文章数目很大时，时间往往是无法忍受的。</p>
]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Es </tag>
            
            <tag> 倒排序 </tag>
            
            <tag> Lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Es – Ik 分词器]]></title>
      <url>/2017/07/20/Elasticsearch-%E2%80%93-Ik-%E5%88%86%E8%AF%8D%E5%99%A8/</url>
      <content type="html"><![CDATA[<h4 id="下载ik分词器包"><a href="#下载ik分词器包" class="headerlink" title="下载ik分词器包"></a>下载ik分词器包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/medcl/elasticsearch-analysis-ik</div></pre></td></tr></table></figure>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip elasticsearch-analysis-ik-master.zip</div></pre></td></tr></table></figure>
<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd elasticsearch-analysis-ik-master</div><div class="line"></div><div class="line">mvn package</div></pre></td></tr></table></figure>
<p>打包后的文件在elasticsearch-analysis-ik-master/target/目录下</p>
<h4 id="集成到ES"><a href="#集成到ES" class="headerlink" title="集成到ES"></a>集成到ES</h4><p>在elasticsearch-5.3.0/plugins下创建目录 ik<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy and unzip target/releases/elasticsearch-analysis-ik-5.3.0.zip to your-es-root/plugins/ik</div></pre></td></tr></table></figure></p>
<p>然后删除 zip文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -f elasticsearch-analysis-ik-5.3.0.zip</div></pre></td></tr></table></figure></p>
<h4 id="重启ES"><a href="#重启ES" class="headerlink" title="重启ES"></a>重启ES</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/elasticsearch</div></pre></td></tr></table></figure>
<h4 id="添加数据测试"><a href="#添加数据测试" class="headerlink" title="添加数据测试"></a>添加数据测试</h4><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT http://localhost:9200/user</div></pre></td></tr></table></figure>
<h5 id="创建mapping"><a href="#创建mapping" class="headerlink" title="创建mapping"></a>创建mapping</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/user/fulltext/_mapping -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;fulltext&quot;: &#123;</div><div class="line">             &quot;_all&quot;: &#123;</div><div class="line">            &quot;analyzer&quot;: &quot;ik_max_word&quot;,</div><div class="line">            &quot;search_analyzer&quot;: &quot;ik_max_word&quot;,</div><div class="line">            &quot;term_vector&quot;: &quot;no&quot;,</div><div class="line">            &quot;store&quot;: &quot;false&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">            &quot;content&quot;: &#123;</div><div class="line">                &quot;type&quot;: &quot;text&quot;,</div><div class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;,</div><div class="line">                &quot;search_analyzer&quot;: &quot;ik_max_word&quot;,</div><div class="line">                &quot;include_in_all&quot;: &quot;true&quot;,</div><div class="line">                &quot;boost&quot;: 8</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>我的理解就是solr中的分词器 的 fieldType。</p>
<h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/user/fulltext/1 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;美国留给伊拉克的是个烂摊子吗&quot;&#125;</div><div class="line">&apos;</div><div class="line">curl -XPOST http://localhost:9200/user/fulltext/2 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;公安部：各地校车将享最高路权&quot;&#125;</div><div class="line">&apos;</div><div class="line">curl -XPOST http://localhost:9200/user/fulltext/3 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;&#125;</div><div class="line">&apos;</div><div class="line">curl -XPOST http://localhost:9200/user/fulltext/4 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;&#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/user/fulltext/_search?pretty  -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;content&quot; : &quot;中国&quot; &#125;&#125;,</div><div class="line">    &quot;highlight&quot; : &#123;</div><div class="line">        &quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],</div><div class="line">        &quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],</div><div class="line">        &quot;fields&quot; : &#123;</div><div class="line">            &quot;content&quot; : &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&apos;</div><div class="line">结果集</div><div class="line">&#123;</div><div class="line">  &quot;took&quot; : 7,</div><div class="line">  &quot;timed_out&quot; : false,</div><div class="line">  &quot;_shards&quot; : &#123;</div><div class="line">    &quot;total&quot; : 5,</div><div class="line">    &quot;successful&quot; : 5,</div><div class="line">    &quot;failed&quot; : 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot; : &#123;</div><div class="line">    &quot;total&quot; : 2,</div><div class="line">    &quot;max_score&quot; : 4.278213,</div><div class="line">    &quot;hits&quot; : [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot; : &quot;user&quot;,</div><div class="line">        &quot;_type&quot; : &quot;fulltext&quot;,</div><div class="line">        &quot;_id&quot; : &quot;4&quot;,</div><div class="line">        &quot;_score&quot; : 4.278213,</div><div class="line">        &quot;_source&quot; : &#123;</div><div class="line">          &quot;content&quot; : &quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;highlight&quot; : &#123;</div><div class="line">          &quot;content&quot; : [</div><div class="line">            &quot;&lt;tag1&gt;中国&lt;/tag1&gt;驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot; : &quot;user&quot;,</div><div class="line">        &quot;_type&quot; : &quot;fulltext&quot;,</div><div class="line">        &quot;_id&quot; : &quot;3&quot;,</div><div class="line">        &quot;_score&quot; : 2.2110996,</div><div class="line">        &quot;_source&quot; : &#123;</div><div class="line">          &quot;content&quot; : &quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;highlight&quot; : &#123;</div><div class="line">          &quot;content&quot; : [</div><div class="line">            &quot;中韩渔警冲突调查：韩警平均每天扣1艘&lt;tag1&gt;中国&lt;/tag1&gt;渔船&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Es </tag>
            
            <tag> Ik </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Es – 核心概念]]></title>
      <url>/2017/07/20/Elasticsearch-%E2%80%93-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h4 id="接近实时（NRT）"><a href="#接近实时（NRT）" class="headerlink" title="接近实时（NRT）"></a>接近实时（NRT）</h4><p>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒）。</p>
<h4 id="集群（cluster）"><a href="#集群（cluster）" class="headerlink" title="集群（cluster）"></a>集群（cluster）</h4><p>一个集群就是由一个或多个节点组织在一起，它们共同持有你整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。在产品环境中显式地设定这个名字是一个好习惯，但是使用默认值来进行测试/开发也是不错的。</p>
<h4 id="节点（node）"><a href="#节点（node）" class="headerlink" title="节点（node）"></a>节点（node）</h4><p>一个节点是你集群中的一个服务器，作为集群的一部分，它存储你的数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。</p>
<p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p>
<p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p>
<h4 id="索引（index）"><a href="#索引（index）" class="headerlink" title="索引（index）"></a>索引（index）</h4><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。</p>
<p>在一个集群中，如果你想，可以定义任意多的索引。</p>
<h4 id="类型（type）"><a href="#类型（type）" class="headerlink" title="类型（type）"></a>类型（type）</h4><p>在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。</p>
<h4 id="文档（document）"><a href="#文档（document）" class="headerlink" title="文档（document）"></a>文档（document）</h4><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。</p>
<p>在一个index/type里面，只要你想，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。</p>
<h4 id="分片和复制（shards-amp-replicas）"><a href="#分片和复制（shards-amp-replicas）" class="headerlink" title="分片和复制（shards &amp; replicas）"></a>分片和复制（shards &amp; replicas）</h4><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。</p>
<p>为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。</p>
<p>分片之所以重要，主要有两方面的原因：</p>
<p>– 允许你水平分割/扩展你的内容容量<br>– 允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量</p>
<p>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。</p>
<p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p>
<p>复制之所以重要，有两个主要原因：<br>– 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。<br>– 扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行</p>
<p>总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p>
<p>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。</p>
<p>下面附上一张关于索引，类型，文档的三者关系图，便于很好的理解：</p>
<p><img src="A89094F0-4A47-4EE9-8415-3852022E2FE9.jpg" alt="索引，类型，文档关系图"></p>
<p>集群的架构简图：<br><img src="QQ20170424-2352252x.png" alt="集群结构图"></p>
]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Es </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Es – 安装]]></title>
      <url>/2017/07/20/Elasticsearch-%E2%80%93-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>由于高版本提高了安全级别，不能采用root账户启动.</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载地址：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.3.0.zip" target="_blank" rel="external">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.3.0.zip</a></p>
<h4 id="解压后执行"><a href="#解压后执行" class="headerlink" title="解压后执行"></a>解压后执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/elasticsearch</div></pre></td></tr></table></figure>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><h5 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: don&apos;t run elasticsearch as root.</div><div class="line">        at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:93)</div><div class="line">        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:144)</div><div class="line">        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:285)</div><div class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)</div><div class="line">Refer to the log for complete error details.</div></pre></td></tr></table></figure>
<h5 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h5><p>因为版本的问题，最新的版本安全级别提高了，不允许采用root帐号启动，所以我们要添加一个用户。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#添加一个用户：elasticsearch</div><div class="line">$useradd elasticsearch</div><div class="line">#给用户elasticsearch设置密码，连续输入2次</div><div class="line">$passwd elasticsearch</div><div class="line">#创建一个用户组 es</div><div class="line">groupadd es</div><div class="line">#分配 elasticsearch 到 es 组</div><div class="line">usermod -G elasticsearch es</div><div class="line">#这里注意下，如果提示用户“es”不存在，那么是因为服务器版本问题，你可以换成 usermod -G es elasticsearch ,也就是用户和用户组对调一下使用。</div><div class="line">#在elasticsearch 根目录下，给定用户权限。-R表示逐级（N层目录） ， * 表示 任何文件</div><div class="line">chown  -R elasticsearch.es *</div><div class="line">#切换到elasticsearch用户</div><div class="line">su elasticsearch</div></pre></td></tr></table></figure>
<p>如果不按上面的给用户 elasticsearch  分配权限目录。那么会报下面的错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">java.io.FileNotFoundException: /home/es/elasticsearch-2.2.0/logs/elasticsearch.log (Permission denied)</div><div class="line">        at java.io.FileOutputStream.open(Native Method)</div><div class="line">        at java.io.FileOutputStream.(FileOutputStream.java:221)</div><div class="line">        at java.io.FileOutputStream.(FileOutputStream.java:142)</div><div class="line">        at org.apache.log4j.FileAppender.setFile(FileAppender.java:294)</div><div class="line">        at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:165)</div><div class="line">        at org.apache.log4j.DailyRollingFileAppender.activateOptions(DailyRollingFileAppender.java:223)</div><div class="line">        at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307)</div><div class="line">        at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172)</div><div class="line">        at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104)</div><div class="line">        at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:842)</div><div class="line">        at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:768)</div><div class="line">        at org.apache.log4j.PropertyConfigurator.configureRootCategory(PropertyConfigurator.java:648)</div><div class="line">        at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:514)</div><div class="line">        at org.apache.log4j.PropertyConfigurator.configure(PropertyConfigurator.java:440)</div><div class="line">        at org.elasticsearch.common.logging.log4j.LogConfigurator.configure(LogConfigurator.java:128)</div><div class="line">        at org.elasticsearch.bootstrap.Bootstrap.setupLogging(Bootstrap.java:204)</div><div class="line">        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:258)</div><div class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)</div><div class="line">log4j:ERROR Either File or DatePattern options are not set for appender [file].</div><div class="line">log4j:ERROR setFile(null,true) call failed.</div></pre></td></tr></table></figure>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vi config/elasticsearch.yml</div><div class="line">#cluster name</div><div class="line">cluster.name: sojson-application</div><div class="line">#节点名称</div><div class="line">node.name: node-1</div><div class="line">#绑定IP和端口</div><div class="line">network.host: 123.88.88.88</div><div class="line">http.port: 9200</div></pre></td></tr></table></figure>
<h4 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/elasticsearch -d</div></pre></td></tr></table></figure>
<h4 id="查找进程"><a href="#查找进程" class="headerlink" title="查找进程"></a>查找进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep elasticsearch</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Es </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim colorschemes]]></title>
      <url>/2017/07/20/Vim-colorschemes/</url>
      <content type="html"><![CDATA[<p>最近给vim换了个主题?，里面有丰富的主题，也可以去web页面去定制。给分享下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">官方地址：http://bytefluent.com/vivify/</div><div class="line">GitHub：https://github.com/flazz/vim-colorschemes</div></pre></td></tr></table></figure>
<p>我的设置是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">colorscheme murphy</div></pre></td></tr></table></figure></p>
<p>希望大家喜欢。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> colorschemes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell – item2 配色]]></title>
      <url>/2017/07/20/Shell-%E2%80%93-item2-%E9%85%8D%E8%89%B2/</url>
      <content type="html"><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>请到 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="external">https://github.com/mbadolato/iTerm2-Color-Schemes</a> 下载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git</div></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>To install:</p>
<ul>
<li>Launch iTerm 2. Get the latest version at iterm2.com</li>
<li>Type CMD+i (⌘+i)</li>
<li>Navigate to Colors tab</li>
<li>Click on Color Presets</li>
<li>Click on Import</li>
<li>Select the .itermcolors file(s) of the scheme(s) you’d like to use</li>
<li>Click on Color Presets and choose a color scheme</li>
</ul>
<p><img src="WX20170511-1352312x.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Iterm2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 中文编码问题]]></title>
      <url>/2017/07/20/Python-%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h4><p>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</p>
<p>解决方法为只要在文件开头加入 # -<em>- coding: UTF-8 -</em>- 或者 #coding=utf-8 就行了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: UTF-8 -*-</div><div class="line">print &quot;你好，世界&quot;;</div></pre></td></tr></table></figure>
<p>所以如果大家在学习过程中，代码中包含中文，就需要在头部指定编码。</p>
<p>注意：Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</p>
<p>如果你使用编辑器，同时需要设置好编辑器的编码，如 Pycharm 设置步骤：</p>
<ul>
<li>1.进入 file &gt; Settings，在输入框搜索 encoding。</li>
<li>2.找到 Editor &gt; File encodings，将 IDE Encoding 和 Project Encoding 设置为utf-8。</li>
</ul>
<h4 id="编码之间的转换"><a href="#编码之间的转换" class="headerlink" title="编码之间的转换"></a>编码之间的转换</h4><p>例如 类Unix系统上编写的python，如果放到windows下面执行，比如输出的信息包含中文，就需要转换了，<br>不管是 gb2312 转 utf8 还是 utf8 转 gb2312 都需要现将字符串转换成Unicode的编码，然后再转换成<br>正确的编码例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print &quot;2.结算表格读取完成&quot;.decode(&apos;utf-8&apos;).encode(&apos;gb2312&apos;)</div></pre></td></tr></table></figure></p>
<p>将输出的提示语utf8转成gb2312。</p>
<h4 id="print-list-中文"><a href="#print-list-中文" class="headerlink" title="print list 中文"></a>print list 中文</h4><p>如果查看print list 的时候里面中文也显示正确，方便调试可这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import uniout</div></pre></td></tr></table></figure></p>
<p>引入该包 就可以显示list中的中文了。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Php 一致性哈希]]></title>
      <url>/2017/07/20/Php-%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E5%8C%85%E5%90%AB%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>之前看到Es的分片路由机制，想到了分布式的一致性哈希，</p>
<p>从无虚拟哈希环，到添加上虚拟哈希环。</p>
<p>下面是php的实现。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myHash</span><span class="params">($str)</span> </span>&#123;</div><div class="line">    $hash = <span class="number">0</span>;</div><div class="line">    $s    = md5($str);</div><div class="line">    $seed = <span class="number">5</span>;</div><div class="line">    $len  = <span class="number">32</span>;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</div><div class="line">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsistentHash</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">#每个物理节点生成虚拟节点个数</span></div><div class="line">    <span class="keyword">public</span> $virtual_num = <span class="number">300</span>;</div><div class="line"></div><div class="line">    <span class="comment">// server列表</span></div><div class="line">    <span class="keyword">public</span> $_server_list = <span class="keyword">array</span>();</div><div class="line">    <span class="comment">// 延迟排序，因为可能会执行多次addServer</span></div><div class="line">    <span class="keyword">private</span> $_layze_sorted = <span class="keyword">FALSE</span>;</div><div class="line"></div><div class="line">    <span class="comment">#server物理节点</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addServer</span><span class="params">($server)</span> </span>&#123;</div><div class="line">        $hash = myHash($server);</div><div class="line">        <span class="keyword">$this</span>-&gt;_layze_sorted = <span class="keyword">FALSE</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_server_list[$hash])) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_server_list[$hash] = $server;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">#server虚拟节点</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addServerVir</span><span class="params">($server)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="keyword">$this</span>-&gt;virtual_num; $i++)</div><div class="line">        &#123;</div><div class="line">            $hash_key = myHash($server.<span class="string">"#"</span>.$i);</div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_server_list[$hash_key]))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;_server_list[$hash_key] = $server;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($key)</span> </span>&#123;</div><div class="line">        <span class="comment">// 排序</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_layze_sorted) &#123;</div><div class="line">            ksort(<span class="keyword">$this</span>-&gt;_server_list);</div><div class="line">            <span class="keyword">$this</span>-&gt;_layze_sorted = <span class="keyword">TRUE</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">#print_r($this-&gt;_server_list);exit();</span></div><div class="line"></div><div class="line">        $hash = myHash($key);</div><div class="line">        $len  = sizeof(<span class="keyword">$this</span>-&gt;_server_list);</div><div class="line">        <span class="keyword">if</span> ($len == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $keys   = array_keys(<span class="keyword">$this</span>-&gt;_server_list);  <span class="comment">#server hash 值</span></div><div class="line">        $values = array_values(<span class="keyword">$this</span>-&gt;_server_list);  <span class="comment">#server 地址</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> ($hash &lt;= $keys[<span class="number">0</span>] || $hash &gt;= $keys[$len - <span class="number">1</span>]) &#123;</div><div class="line">            <span class="keyword">return</span> $values[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">foreach</span> ($keys <span class="keyword">as</span> $key=&gt;$pos) &#123;</div><div class="line">            $next_pos = <span class="keyword">NULL</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($keys[$key + <span class="number">1</span>]))</div><div class="line">            &#123;</div><div class="line">                $next_pos = $keys[$key + <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (is_null($next_pos)) &#123;</div><div class="line">                <span class="keyword">return</span> $values[$key];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 区间判断</span></div><div class="line">            <span class="keyword">if</span> ($hash &gt;= $pos &amp;&amp; $hash &lt;= $next_pos) &#123;</div><div class="line">                <span class="keyword">return</span> $values[$key];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$consisHash = <span class="keyword">new</span> ConsistentHash();</div><div class="line"></div><div class="line"><span class="comment">#物理节点hash环</span></div><div class="line"><span class="comment">#$consisHash-&gt;addServer("server1")-&gt;addServer("server2")-&gt;addServer("server3")-&gt;addServer("server4");</span></div><div class="line"></div><div class="line"><span class="comment">#带虚拟节点的hash环</span></div><div class="line">$consisHash-&gt;addServerVir(<span class="string">"server1"</span>)-&gt;addServerVir(<span class="string">"server2"</span>)-&gt;addServerVir(<span class="string">"server3"</span>)-&gt;addServerVir(<span class="string">"server4"</span>);</div><div class="line"></div><div class="line">$total_server1_num = $total_server2_num = $total_server3_num = $total_server4_num = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> ($i=<span class="number">1</span>; $i &lt;= <span class="number">200000</span>; $i++) &#123;</div><div class="line">    <span class="comment"># code...</span></div><div class="line">    $key = uniqid(<span class="keyword">TRUE</span>,<span class="keyword">TRUE</span>);</div><div class="line"></div><div class="line">    $server_name = $consisHash-&gt;find($key);</div><div class="line">    <span class="keyword">if</span>($server_name == <span class="string">"server1"</span>)&#123;</div><div class="line">        $total_server1_num += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($server_name == <span class="string">"server2"</span>)&#123;</div><div class="line">        $total_server2_num += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($server_name == <span class="string">"server3"</span>)&#123;</div><div class="line">        $total_server3_num += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($server_name == <span class="string">"server4"</span>)&#123;</div><div class="line">        $total_server4_num += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"server1 num :"</span> .$total_server1_num .<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"server2 num :"</span> .$total_server2_num .<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"server3 num :"</span> .$total_server3_num .<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"server4 num :"</span> .$total_server4_num .<span class="string">"\n"</span>;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/pda/flexihash" target="_blank" rel="external">flexihash</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Php </tag>
            
            <tag> 一致性Hash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis - PHP7扩展]]></title>
      <url>/2017/07/20/Redis-PHP7%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<p>下载  <a href="https://github.com/phpredis/phpredis/tree/php7" target="_blank" rel="external">https://github.com/phpredis/phpredis/tree/php7</a></p>
<p>解压  unzip phpredis-php7.zip</p>
<p>phpize  #用phpize生成configure配置文件</p>
<p>./configure  配置</p>
<p>make  #编译</p>
<p>make install  #安装</p>
<p>安装完成后将出现的安装路径添加到php.ini中:</p>
<p>extension_dir = “/usr/lib/php/20151012”</p>
<p>extension = redis.so</p>
<p>重启服务器,查看phpinfo,是不是搞定.</p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Php </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jdk - Ubuntu安装]]></title>
      <url>/2017/07/20/Jdk-Ubuntu%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>Ubuntu 下安装 jdk </p>
<h4 id="1-解压"><a href="#1-解压" class="headerlink" title="1.解压"></a>1.解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf ./jdk-7u45-linux-x64.tar.gz</div></pre></td></tr></table></figure>
<h4 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi ~/.bashrc 或者 ~/.zshrc</div><div class="line"></div><div class="line">export JAVA_HOME=/opt/Java/jdk/jdk1.7 </div><div class="line">export CLASSPATH=$&#123;JAVA_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure>
<h4 id="3-立即生效"><a href="#3-立即生效" class="headerlink" title="3.立即生效"></a>3.立即生效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Jdk </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Jdk </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell – Mac zsh]]></title>
      <url>/2017/07/20/Shell-%E2%80%93-Mac-zsh/</url>
      <content type="html"><![CDATA[<blockquote>
<p>目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh， 这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，<br>这玩意就像「X天叫你学会 C++」系列，可以让你神功速成，而且是真的。</p>
</blockquote>
<p>地址：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Zsh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell – SSH自动登录]]></title>
      <url>/2017/07/19/Shell-%E2%80%93-SSH%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>最近由于频繁操作vps，发现每次输入密码太费劲，所以写了个自动登录shell脚本。</p>
<h4 id="1-创建脚本-xxx-sh"><a href="#1-创建脚本-xxx-sh" class="headerlink" title="1.创建脚本 xxx.sh"></a>1.创建脚本 xxx.sh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/expect</div><div class="line">set timeout 30</div><div class="line">spawn ssh -l root ip地址</div><div class="line">expect &quot;password:&quot;</div><div class="line">send &quot;密码\r&quot;</div></pre></td></tr></table></figure>
<h4 id="2-将脚本目录加入环境变量"><a href="#2-将脚本目录加入环境变量" class="headerlink" title="2.将脚本目录加入环境变量"></a>2.将脚本目录加入环境变量</h4><p>export PATH=/Users/zhen/Documents/shell:$PATH<br>这样一来在命令行随时可以调用脚本远程登录。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Shell </tag>
            
            <tag> SSH </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/07/19/Linux%E4%B8%8B-ssh-%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<hr>
<p>title: Linux下 SSH 登录脚本</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim 常用命令]]></title>
      <url>/2017/07/19/Vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">----------------------------光标移动-------------------------</div><div class="line">h 向左移动一个字符</div><div class="line">j 向下移动一行</div><div class="line">k 向上移动一行</div><div class="line">l 向右移动一个字符</div><div class="line"> </div><div class="line">control f 向下翻一页</div><div class="line">control b 向上翻一页</div><div class="line">control d 向下翻半页</div><div class="line">control u 向上翻半页</div><div class="line"> </div><div class="line">+ 非空格下一行</div><div class="line">- 非空格上一行</div><div class="line"> </div><div class="line">n + 空格  移动n个字符</div><div class="line">0  移动到当前行第一个字符处</div><div class="line">$  移动到当前行最后一个字符处</div><div class="line">G  移动到最后一行</div><div class="line">nG 跳到n行</div><div class="line">gg 第一行</div><div class="line"> </div><div class="line">n 回车  向下n行</div><div class="line">?keyword 向上查找 配合 n N 来上下查找</div><div class="line">/keyword 向下查找 配合 n N 来上下查找</div><div class="line"> </div><div class="line">:n1,n2s/keyword1/keyword2/g  在n1到n2行之间，查找keyword1并且替换成keyword2</div><div class="line">:1,$s/keyword1/keyword2/g  同上只不过是从1-最后一行</div><div class="line">:n1,n2/keyword1/keyword2/gc 只不过要确认后才替换</div><div class="line"> </div><div class="line">-----------------------------粘贴复制------------------------</div><div class="line">x 向后删除一个字符</div><div class="line">X 向前删除一个字符</div><div class="line">nx 连续向后删除n个字符</div><div class="line">dd 删除当前行</div><div class="line">ndd 删除向下n行</div><div class="line"> </div><div class="line">d1G 删除光标之前所有</div><div class="line">dG  删除光标到最后</div><div class="line">d$  删除光标到行末</div><div class="line">d0  删除光标行首</div><div class="line"> </div><div class="line">yy 复制当前航</div><div class="line">nyy 向下复制n行</div><div class="line">y1G 复制光标到行首</div><div class="line">yG  复制光标到最后一行</div><div class="line">y0  复制光标到行首</div><div class="line">y$  复制光标到行末</div><div class="line"> </div><div class="line">p 光标下一行粘贴</div><div class="line">P 光标上一行粘贴</div><div class="line"> </div><div class="line">---------------------------------插入------------------------</div><div class="line">i 光标位置插入</div><div class="line">I 当前行非空第一个字符处插入</div><div class="line">a 光标处下一个字符插入</div><div class="line">A 当前行最后一个字符插入</div><div class="line">o 下一行插入</div><div class="line">o 上一行插入</div><div class="line"> </div><div class="line">:w filename 保存到另一个文件</div><div class="line">:r filename 读取文件内容到当前</div><div class="line"> </div><div class="line">:! command  暂时离开vim 执行命令</div><div class="line">---------------------区块选择-------------------------------</div><div class="line">v 字符区块选择</div><div class="line">V 行区块选择</div><div class="line">y 复制区块</div><div class="line">d 删除区块</div><div class="line">contrl + v 范围区块</div><div class="line">区块选择下 按 = 键 自动排版，代码会自动排版</div><div class="line">--------------------多文件同时编辑--------------------------</div><div class="line">vim filename1 filename2</div><div class="line">:n 下一个文件</div><div class="line">:N 上一个文件</div><div class="line">:files 打开的文件列表</div><div class="line">-------------------分屏---------------------</div><div class="line">:sp filename</div><div class="line">ctrl + w 来切换光标</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell – Svn Log]]></title>
      <url>/2017/07/19/Shell-%E2%80%93-Svn-Log/</url>
      <content type="html"><![CDATA[<h5 id="1-命令繁琐"><a href="#1-命令繁琐" class="headerlink" title="1.命令繁琐"></a>1.命令繁琐</h5><p>由于每次查看log需要输入好长的命令，在这里写成shell，方便许多。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">user_name=$1</div><div class="line">few_days_ago=$2</div><div class="line"></div><div class="line">if [ ! -n &quot;$user_name&quot; ]</div><div class="line">then</div><div class="line">	user_name=&apos;xxxxxxxxxxxx&apos;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ ! -n &quot;$few_days_ago&quot; ]</div><div class="line">then</div><div class="line">	few_days_ago=30</div><div class="line">fi</div><div class="line"></div><div class="line">start_time=`date -v -&quot;$few_days_ago&quot;d +%Y-%m-%d`</div><div class="line">end_time=`date -v +1d +%Y-%m-%d`</div><div class="line"></div><div class="line">svn log -r &#123;$start_time&#125;:&#123;$end_time&#125; -v | sed -n &quot;/$user_name/,/--$/ p&quot;</div></pre></td></tr></table></figure>
<h5 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法:"></a>2.使用方法:</h5><p>将shell加入环境变量，在项目里面:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">└─[$] &lt;&gt; svnlog.sh  username  days</div></pre></td></tr></table></figure>
<h5 id="3-默认参数"><a href="#3-默认参数" class="headerlink" title="3.默认参数"></a>3.默认参数</h5><p>如果不传参数默认脚本中username,30天的log。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Svn </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
