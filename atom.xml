<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>斑斓的梦</title>
  <subtitle>Zhen&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pzhen.github.io/"/>
  <updated>2017-08-01T05:34:19.000Z</updated>
  <id>http://pzhen.github.io/</id>
  
  <author>
    <name>P.Zhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mem-内存管理原理</title>
    <link href="http://pzhen.github.io/2017/08/01/Memcached-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8E%9F%E7%90%86/"/>
    <id>http://pzhen.github.io/2017/08/01/Memcached-内存管理原理/</id>
    <published>2017-08-01T05:24:08.000Z</published>
    <updated>2017-08-01T05:34:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>内存管理中一个令人头痛的问题就是内存碎片管理。操作系统、虚拟机垃圾回收在这方面<br>想了许多方法：压缩、复制。Memcached使用了一个非常简单的办法—固定空间分配。</p>
<p>Memcached 将内存空间分为一组slab，每个slab里面又包含一组chunk，同一个slab里面的<br>每个chunk的大小是固定的，拥有相同大小的chunk的slab被组织在一起，叫做slab_class，<br>如图所示。</p>
<p>存储数据时根据数据的size大小，寻找一个大于size的最小chunk<br>将数据写入。这种内存管理方式避免了内存碎片的管理问题，内存<br>的分配和释放都是以chunk为单位的。和其他缓存一样，memcached<br>采用LRU算法释放最近最久未被访问的数据占用的空间，释放的<br>chunk被标记为魏永，等待下一个合适大小数据的写入。</p>
<p>当然这种方式也会带来内存浪费的问题。数据只能存入一个比他大的<br>chunk里，而一个chunk只能存一个数据，其他的空间被浪费了。<br>如果启动参数配置不合理，浪费会更加惊人，发现没有缓存多少<br>数据，内存空间就用尽了。</p>
<p><img src="Image.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内存管理中一个令人头痛的问题就是内存碎片管理。操作系统、虚拟机垃圾回收在这方面&lt;br&gt;想了许多方法：压缩、复制。Memcached使用了一个非常简单的办法—固定空间分配。&lt;/p&gt;
&lt;p&gt;Memcached 将内存空间分为一组slab，每个slab里面又包含一组chunk，同
    
    </summary>
    
      <category term="Memcached" scheme="http://pzhen.github.io/categories/Memcached/"/>
    
    
      <category term="Memcached" scheme="http://pzhen.github.io/tags/Memcached/"/>
    
      <category term="原理" scheme="http://pzhen.github.io/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-CONCAT及GROUP_CONCAT</title>
    <link href="http://pzhen.github.io/2017/08/01/Mysql-CONCAT%E5%8F%8AGROUP-CONCAT/"/>
    <id>http://pzhen.github.io/2017/08/01/Mysql-CONCAT及GROUP-CONCAT/</id>
    <published>2017-08-01T03:43:23.000Z</published>
    <updated>2017-08-01T03:46:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、CONCAT（）函数"><a href="#一、CONCAT（）函数" class="headerlink" title="一、CONCAT（）函数"></a>一、CONCAT（）函数</h3><p>CONCAT（）函数用于将多个字符串连接成一个字符串。<br>使用数据表Info作为示例，其中SELECT id,name FROM info LIMIT 1;的返回结果为<br>+—-+——–+<br>| id | name   |<br>+—-+——–+<br>|  1 | BioCyc |<br>+—-+——–+</p>
<h4 id="1、语法及使用特点："><a href="#1、语法及使用特点：" class="headerlink" title="1、语法及使用特点："></a>1、语法及使用特点：</h4><p>CONCAT(str1,str2,…)<br>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。</p>
<h4 id="2、使用示例："><a href="#2、使用示例：" class="headerlink" title="2、使用示例："></a>2、使用示例：</h4><p>SELECT CONCAT(id, ‘，’, name) AS con FROM info LIMIT 1;返回结果为<br>+———-+<br>| con      |<br>+———-+<br>| 1,BioCyc |<br>+———-+</p>
<p>SELECT CONCAT(‘My’, NULL, ‘QL’);返回结果为<br>+————————–+<br>| CONCAT(‘My’, NULL, ‘QL’) |<br>+————————–+<br>| NULL                     |<br>+————————–+</p>
<h4 id="3、如何指定参数之间的分隔符"><a href="#3、如何指定参数之间的分隔符" class="headerlink" title="3、如何指定参数之间的分隔符"></a>3、如何指定参数之间的分隔符</h4><p>使用函数CONCAT_WS（）。使用语法为：CONCAT_WS(separator,str1,str2,…)<br>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。</p>
<p>如SELECT CONCAT<em>WS(‘</em>‘,id,name) AS con_ws FROM info LIMIT 1;返回结果为<br>+———-+<br>| con_ws   |<br>+———-+<br>| 1_BioCyc |<br>+———-+</p>
<p>SELECT CONCAT_WS(‘,’,’First name’,NULL,’Last Name’);返回结果为<br>+———————————————-+<br>| CONCAT_WS(‘,’,’First name’,NULL,’Last Name’) |<br>+———————————————-+<br>| First name,Last Name                         |<br>+———————————————-+</p>
<h3 id="二、GROUP-CONCAT（）函数"><a href="#二、GROUP-CONCAT（）函数" class="headerlink" title="二、GROUP_CONCAT（）函数"></a>二、GROUP_CONCAT（）函数</h3><p>GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。<br>使用表info作为示例，其中语句SELECT locus,id,journal FROM info WHERE locus IN(‘AB086827’,’AF040764’);的返回结果为<br>+———-+—-+————————–+<br>| locus    | id | journal                  |<br>+———-+—-+————————–+<br>| AB086827 |  1 | Unpublished              |<br>| AB086827 |  2 | Submitted (20-JUN-2002)  |<br>| AF040764 | 23 | Unpublished              |<br>| AF040764 | 24 | Submitted (31-DEC-1997)  |<br>+———-+—-+————————–+</p>
<h4 id="1、使用语法及特点："><a href="#1、使用语法及特点：" class="headerlink" title="1、使用语法及特点："></a>1、使用语法及特点：</h4><p>GROUP_CONCAT([DISTINCT] expr [,expr …]<br>[ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] [,col …]]<br>[SEPARATOR str_val])<br>在 MySQL 中，你可以得到表达式结合体的连结值。通过使用 DISTINCT 可以排除重复值。如果希望对结果中的值进行排序，可以使用 ORDER BY 子句。<br>SEPARATOR 是一个字符串值，它被用于插入到结果值中。缺省为一个逗号 (“,”)，可以通过指定 SEPARATOR “” 完全地移除这个分隔符。<br>可以通过变量 group_concat_max_len 设置一个最大的长度。在运行时执行的句法如下： SET [SESSION | GLOBAL] group_concat_max_len = unsigned_integer;<br>如果最大长度被设置，结果值被剪切到这个最大长度。如果分组的字符过长，可以对系统参数进行设置：SET @@global.group_concat_max_len=40000;</p>
<h4 id="2、使用示例：-1"><a href="#2、使用示例：-1" class="headerlink" title="2、使用示例："></a>2、使用示例：</h4><p>语句 SELECT locus,GROUP_CONCAT(id) FROM info WHERE locus IN(‘AB086827’,’AF040764’) GROUP BY locus; 的返回结果为<br>+———-+——————+<br>| locus    | GROUP_CONCAT(id) |<br>+———-+——————+<br>| AB086827 | 1,2              |<br>| AF040764 | 23,24            |<br>+———-+——————+</p>
<p>语句 SELECT locus,GROUP<em>CONCAT(distinct id ORDER BY id DESC SEPARATOR ‘</em>‘) FROM info WHERE locus IN(‘AB086827’,’AF040764’) GROUP BY locus;的返回结果为<br>+———-+———————————————————-+<br>| locus    | GROUP<em>CONCAT(distinct id ORDER BY id DESC SEPARATOR ‘</em>‘) |<br>+———-+———————————————————-+<br>| AB086827 | 2_1                                                      |<br>| AF040764 | 24_23                                                    |<br>+———-+———————————————————-+</p>
<p>语句SELECT locus,GROUP_CONCAT(concat_ws(‘, ‘,id,journal) ORDER BY id DESC SEPARATOR ‘. ‘) FROM info WHERE locus IN(‘AB086827’,’AF040764’) GROUP BY locus;的返回结果为<br>+———-+————————————————————————–+<br>| locus    | GROUP_CONCAT(concat_ws(‘, ‘,id,journal) ORDER BY id DESC SEPARATOR ‘. ‘) |<br>+———-+————————————————————————–+<br>| AB086827 | 2, Submitted (20-JUN-2002). 1, Unpublished                               |<br>| AF040764 | 24, Submitted (31-DEC-1997) . 23, Unpublished                            |<br>+———-+————————————————————————–+</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、CONCAT（）函数&quot;&gt;&lt;a href=&quot;#一、CONCAT（）函数&quot; class=&quot;headerlink&quot; title=&quot;一、CONCAT（）函数&quot;&gt;&lt;/a&gt;一、CONCAT（）函数&lt;/h3&gt;&lt;p&gt;CONCAT（）函数用于将多个字符串连接成一个字符串。&lt;br
    
    </summary>
    
      <category term="Mysql" scheme="http://pzhen.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://pzhen.github.io/tags/Mysql/"/>
    
      <category term="Concat" scheme="http://pzhen.github.io/tags/Concat/"/>
    
      <category term="Group_concat" scheme="http://pzhen.github.io/tags/Group-concat/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-Datediff()函数</title>
    <link href="http://pzhen.github.io/2017/08/01/Mysql-Datediff-%E5%87%BD%E6%95%B0/"/>
    <id>http://pzhen.github.io/2017/08/01/Mysql-Datediff-函数/</id>
    <published>2017-08-01T03:18:30.000Z</published>
    <updated>2017-08-01T03:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>DATEDIFF() 函数返回两个日期之间的天数。</p>
<p>DATEDIFF(date1,date2)</p>
<p>事例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> con_contract</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    <span class="keyword">datediff</span>(</div><div class="line">        FROM_UNIXTIME(remindtime, <span class="string">'%Y-%m-%d'</span>),<span class="keyword">CURDATE</span>()</div><div class="line">    ) = &#123;$limit_time&#125; <span class="keyword">and</span> state = <span class="number">3</span> <span class="keyword">and</span> archivestate &lt;&gt; <span class="number">4</span> <span class="keyword">and</span> archivestate &lt;&gt; <span class="number">5</span><span class="string">";</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DATEDIFF() 函数返回两个日期之间的天数。&lt;/p&gt;
&lt;p&gt;DATEDIFF(date1,date2)&lt;/p&gt;
&lt;p&gt;事例：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
      <category term="Mysql" scheme="http://pzhen.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://pzhen.github.io/tags/Mysql/"/>
    
      <category term="Datediff" scheme="http://pzhen.github.io/tags/Datediff/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-Int类型</title>
    <link href="http://pzhen.github.io/2017/07/31/Mysql-Int%E7%B1%BB%E5%9E%8B/"/>
    <id>http://pzhen.github.io/2017/07/31/Mysql-Int类型/</id>
    <published>2017-07-31T10:04:20.000Z</published>
    <updated>2017-08-01T02:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>几种整形数据类型的长度</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><pre><code>类型            占用空间(字节)        最小值(带符号的/无符号的)                最大值(带符号的/无符号的)
----------------------------------------------------------------------------------------------------
TINYINT        1                    -128                                127
                                0                                    255
----------------------------------------------------------------------------------------------------
SMALLINT    2                    -32768                                32767
                                0                                    65535
----------------------------------------------------------------------------------------------------
MEDIUMINT    3                    -8388608                            8388607
                                0                                    16777215
----------------------------------------------------------------------------------------------------
int            4                    -2147483648                            2147483647
                                0                                    4294967295
----------------------------------------------------------------------------------------------------
BIGINT        8                    -9223372036854775808                9223372036854775807
                                0                                    18446744073709551615
----------------------------------------------------------------------------------------------------
注:1字节=8位
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几种整形数据类型的长度&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://pzhen.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://pzhen.github.io/tags/Mysql/"/>
    
      <category term="Int" scheme="http://pzhen.github.io/tags/Int/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-Varchar类型</title>
    <link href="http://pzhen.github.io/2017/07/31/Mysql-Varchar%E7%B1%BB%E5%9E%8B/"/>
    <id>http://pzhen.github.io/2017/07/31/Mysql-Varchar类型/</id>
    <published>2017-07-31T10:01:18.000Z</published>
    <updated>2017-07-31T10:06:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>1.varchar存储规则：<br>    5.0版本以上，varchar(20)，指的是20字符，无论存放的是数字、字母还是UTF8汉字（每个汉字3字节），都可以存放20个.<br>    上面测试过了如果超过20个字符mysql截取前20个插入<br>    但是 最大大小是65532字节 也就是 varchar字节最大65535，utf8编码一个字符3个字节65535/3=21785。汉字不能超过21785.</p>
<p>2.关于varchar与set 类型中存储的字符串使用’,’隔开时<br>    可以采用:SELECT * FROM <code>表名</code> WHERE FIND_IN_SET(‘要找的字符串’,<code>字段</code>);这种写法来找出;<br>    最多可以有64个成员  枚举最多有65535种不同值</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;1.varchar存储规则：&lt;br&gt;    5.0版本以上，varchar(20)，指的是20字符，无论存放的是数字、字母还是UTF8汉字（每个汉字3字节），都可以存放20个.&lt;br&gt;    上面测试过了如果超过20个字符mysql截取前20个插入
    
    </summary>
    
      <category term="Mysql" scheme="http://pzhen.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://pzhen.github.io/tags/Mysql/"/>
    
      <category term="Varchar" scheme="http://pzhen.github.io/tags/Varchar/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-蠕虫复制</title>
    <link href="http://pzhen.github.io/2017/07/31/Mysql-%E8%A0%95%E8%99%AB%E5%A4%8D%E5%88%B6/"/>
    <id>http://pzhen.github.io/2017/07/31/Mysql-蠕虫复制/</id>
    <published>2017-07-31T09:22:04.000Z</published>
    <updated>2017-07-31T09:23:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`table`</span> (<span class="string">`id`</span>,<span class="string">`aa`</span>,<span class="string">`bb`</span>,<span class="string">`cc`</span> ) <span class="keyword">SELECT</span> <span class="string">''</span>,<span class="string">'aa内容'</span>,<span class="string">'bb注意cc符号区别'</span>,<span class="string">`cc`</span> <span class="keyword">FROM</span> <span class="string">`table`</span> (<span class="keyword">WHERE</span> .....)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
      <category term="Mysql" scheme="http://pzhen.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://pzhen.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-开启日志</title>
    <link href="http://pzhen.github.io/2017/07/31/Mysql-%E5%BC%80%E5%90%AF%E6%97%A5%E5%BF%97/"/>
    <id>http://pzhen.github.io/2017/07/31/Mysql-开启日志/</id>
    <published>2017-07-31T09:18:58.000Z</published>
    <updated>2017-07-31T09:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">port=3306</div><div class="line">log=D:/mysql.log</div><div class="line">log_slow_queries=C:/temp/mysql_slow.log</div><div class="line">long_query_time=1</div></pre></td></tr></table></figure>
<p>show binary logs;</p>
<p>//查看binlog日志<br>show binlog events in ‘mysql-bin.000181’;</p>
<p>查看日志是否开启<br>1).可以通过Mysql配置文件my.cnf来确认（Mysql默认开启二进制日志记录）：<br>Replication Master Server (default)<br>binary logging is required for replication<br>log-bin=mysql-bin<br>刷新日志<br>flush logs;<br>查看当前日志位置<br>show master status;<br>查看当前所有日志<br>show master logs;<br>清空所有的bin-log日志<br>reset master;</p>
<p>查看日志内容<br>mysqlbinlog –no-defaults mysql-bin.00001;<br>删除bin-log<br>mysql&gt; purge binary logs to ‘ablelee.000003’;<br>Query OK, 0 rows affected (0.16 sec)<br>关闭 bin-log 日志<br>找到配置文件my.cnf，对于linux，一般默认在/etc目录下，打开此文件，使用井号(#)注释掉如下两个配置项目即可。<br>log-bin=mysql-bin<br>binlog_format=mixed<br>显示所有日志<br>mysql&gt; show binary logs;</p>
<p>//查看所有日志<br>show binary logs;<br>//查看正在使用的binlog<br>show master status;</p>
<p>purge binary logs to ‘mysql-tb-bin.000005’;<br>这个命令就是清理除mysql-tb-bin.000005以外的其他二进制日志；</p>
<p>//查看binlog日志<br>show binlog events in ‘mysql-bin.000181’;</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="Mysql" scheme="http://pzhen.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://pzhen.github.io/tags/Mysql/"/>
    
      <category term="日志" scheme="http://pzhen.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Php 一phpStorm快捷键</title>
    <link href="http://pzhen.github.io/2017/07/31/Php-phpStorm%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://pzhen.github.io/2017/07/31/Php-phpStorm快捷键/</id>
    <published>2017-07-31T08:35:26.000Z</published>
    <updated>2017-07-31T08:37:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在把一些使用技巧记录下来,免得到时候忘了再查.</p>
<p>来源于网络。</p>
<a id="more"></a>
<p>1,从版本控制系统创建项目:<br>CVS -&gt; Checkout from Version Control</p>
<p>2, 关联DOC文档:<br>右键External Librariese -&gt; Configure PHP include paths</p>
<p>3, 去掉波浪线:<br>settings -&gt; Editor -&gt; Colors &amp; Fonts -&gt; General -&gt; TYPO-&gt;Effects</p>
<p>4, 显示行号:<br>settings -&gt; Editor-&gt;Appearance-&gt;Show line numbers </p>
<p>5,远程或本地同步文件:<br>Tools -&gt; Deploments -&gt; Configuration</p>
<p>6, 去掉右上角浏览器图标:<br>settings -&gt; tools -&gt; WebBrowsers</p>
<p>7, 添加VIM插件:<br>settings-&gt;editor -&gt;plugins-&gt;browse repositories -&gt;搜索VIM</p>
<p>8,启动的时候不打开工程文件<br>Settings-&gt;General去掉Reopen last project on startup.</p>
<p>9, 取消自动保存<br>appearance -&gt; system settings -&gt; save file的两个选项 去掉</p>
<p>10, 将编辑的文件加星号标识:<br>settings -&gt; editor -&gt; editor tabs -&gt; 勾选 mark modifed tabs…</p>
<p>11, 添加扩展名高亮显示:<br>settings -&gt; editor -&gt; file types  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">常用快捷键:</div><div class="line">control + option + l    将代码格式化</div><div class="line">command + shift + u    切换大小写</div><div class="line">command + shift + + / command + shift + -     折叠/展开所有区块</div><div class="line">command + e     列出最后打开的文件</div><div class="line">control + tab  / control + shift + tab     切换打开的文件</div><div class="line">command + /     行注释</div><div class="line">ctrl + shift + /      块注释</div><div class="line">command + b     函数追踪,同command +单击</div><div class="line">command + alt + 左右箭头      操作动作前进/回退</div><div class="line">shift + command + r      按文件名搜索对应文件所在路径</div><div class="line">shift + command + t      按类名搜索对应文件所在路径</div><div class="line">shift + command + c      复制当前文件所在路径</div><div class="line">Command + Shift + O     打开文件</div><div class="line">Command + O          打开类</div><div class="line">alt + F1        定位编辑文件所在位置:</div><div class="line">alt + F12        打开命令行栏</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在把一些使用技巧记录下来,免得到时候忘了再查.&lt;/p&gt;
&lt;p&gt;来源于网络。&lt;/p&gt;
    
    </summary>
    
      <category term="Php" scheme="http://pzhen.github.io/categories/Php/"/>
    
    
      <category term="Php" scheme="http://pzhen.github.io/tags/Php/"/>
    
      <category term="PhpStorm" scheme="http://pzhen.github.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title>Shell – Wget 克隆网站</title>
    <link href="http://pzhen.github.io/2017/07/31/Shell-%E2%80%93-Wget-%E5%85%8B%E9%9A%86%E7%BD%91%E7%AB%99%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <id>http://pzhen.github.io/2017/07/31/Shell-–-Wget-克隆网站到本地/</id>
    <published>2017-07-31T08:14:22.000Z</published>
    <updated>2017-07-31T08:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候觉得网上看到的漂亮的模板，想下载怎么办哈哈哈wget就搞定了。</p>
<a id="more"></a>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -k -p -nH -N http://www.baidu.com</div></pre></td></tr></table></figure>
<p>-k   把已下载文件中的所有链接都转换为本地引用，不在依赖原始或在线内容</p>
<p>-p   下载所有必要文件，确保离线可用，包括图片和样式表</p>
<p>-nH  禁止把文件下载到以主机名为前缀的文件夹中。</p>
<p>-N   启用文件的时间戳,以匹配来源的时间戳.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候觉得网上看到的漂亮的模板，想下载怎么办哈哈哈wget就搞定了。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://pzhen.github.io/categories/Linux/"/>
    
      <category term="Shell" scheme="http://pzhen.github.io/categories/Linux/Shell/"/>
    
    
      <category term="Linux" scheme="http://pzhen.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="http://pzhen.github.io/tags/Shell/"/>
    
      <category term="Wget" scheme="http://pzhen.github.io/tags/Wget/"/>
    
  </entry>
  
  <entry>
    <title>Php 一Api通信规则</title>
    <link href="http://pzhen.github.io/2017/07/31/Php-Api%E9%80%9A%E4%BF%A1%E8%A7%84%E5%88%99/"/>
    <id>http://pzhen.github.io/2017/07/31/Php-Api通信规则/</id>
    <published>2017-07-31T07:34:52.000Z</published>
    <updated>2017-07-31T07:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Api 通信中，可以采用非对称加密的方式，来提高安全性，也可以采用，下面的通信规则。</p>
<p>如果采用下面方式，可以将时间戳取前7位有效数字来加密这样每隔十几分钟MD5<br>就一换，还能避开服务器时间不同步问题，也是不错的选择。</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *生成THQS算法的信息查询串（Query string）</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_query_string</span><span class="params">($info)</span> </span>&#123;</div><div class="line">    ksort($info);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;http_build_query($info);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据数组生成HTTP请求URL参数</div><div class="line"> * <span class="doctag">@param</span> unknown_type $array</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">http_build_query</span><span class="params">($array)</span> </span>&#123;</div><div class="line">    $query = <span class="string">''</span>;</div><div class="line">    <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">        $key = <span class="keyword">self</span>::urlencode($key);</div><div class="line">        $value = <span class="keyword">self</span>::urlencode($value);</div><div class="line">        $query .= <span class="string">"$key=$value&amp;"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($query)) &#123;</div><div class="line">        $query = substr($query, <span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $query;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * *不要被转义了。</div><div class="line"> * <span class="doctag">@param</span> $string</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">urlencode</span><span class="params">($string)</span> </span>&#123;</div><div class="line">    $string = str_replace(<span class="string">'*'</span>, <span class="string">'-tSl2nWmMsagD-gEr'</span>, $string);</div><div class="line">    $string = urlencode($string);</div><div class="line">    <span class="keyword">return</span> str_replace(<span class="string">'-tSl2nWmMsagD-gEr'</span>, <span class="string">'*'</span>, $string);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 	生成THQS算法的hash值</div><div class="line"> *  $salt = API Key 秘钥</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_hashed_value</span><span class="params">($qs, $time, $salt)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> strtoupper(md5($qs . <span class="string">"&amp;time=$time&amp;salt=$salt"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *	return string</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">ccXml</span><span class="params">()</span></span>&#123;</div><div class="line">    header(<span class="string">'Content-Type:text/xml'</span>);</div><div class="line">    $str = <span class="string">''</span>;</div><div class="line">    $str .= <span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>;</div><div class="line">    $str .= <span class="string">"&lt;result&gt;OK&lt;/result&gt;"</span>;</div><div class="line">    <span class="keyword">return</span> $str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Api 通信中，可以采用非对称加密的方式，来提高安全性，也可以采用，下面的通信规则。&lt;/p&gt;
&lt;p&gt;如果采用下面方式，可以将时间戳取前7位有效数字来加密这样每隔十几分钟MD5&lt;br&gt;就一换，还能避开服务器时间不同步问题，也是不错的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="Php" scheme="http://pzhen.github.io/categories/Php/"/>
    
    
      <category term="Php" scheme="http://pzhen.github.io/tags/Php/"/>
    
      <category term="Api" scheme="http://pzhen.github.io/tags/Api/"/>
    
  </entry>
  
  <entry>
    <title>Composer - 管理PHP依赖</title>
    <link href="http://pzhen.github.io/2017/07/21/Composer-%E7%AE%A1%E7%90%86PHP%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
    <id>http://pzhen.github.io/2017/07/21/Composer-管理PHP依赖关系/</id>
    <published>2017-07-21T09:32:30.000Z</published>
    <updated>2017-07-22T08:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>现在软件规模越来越大，PHP项目的开发模式和许多年前已经有了很大变化。记得初学PHP那会儿，boblog是一个很好的例子，几乎可以代表 PHP项目的开发模式。当时PHP 5.x以上的版本刚开始流行，仍然有大量的生产环境使用PHP4.x。由于历史遗留的问题，OOP思想在PHP项目中还不是那么广泛流行。随着 PHP5.3的发布，PHP项目规模的扩大，在其他语言领域大展身手的OOP开发模式也在PHP中崭露头角。<br><a id="more"></a><br>大型项目不可能是从头开始的，使用社区已经提供的资源可以为项目带来很大的便利。然而各自为政的打包方式、依赖关系的处理，导致了很难将两个开源项 目集成到一起。虽然有pear这种PHP官方支持的包管理工具，但是依然没有很好的统一的依赖关系管理的办法。直到Composer的出现。</p>
<p>Composer的依赖关系管理风格，看上去更像Java的Maven。项目编译和打包、依赖关系的解决都可以很轻松的实现。再也不用费神去寻找或者更新第三方库，或者将他们集成到一起。这一切全部都可以交给Composer来完成。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>首先来看一个类似于Helloworld的例子，让我们对Composer先有一个感性的认识吧。</p>
<p>如何在一个PHP项目中启用Composer，很简单，只需要在项目根目录中创建一个composer.json文件即可，它包含如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;require&quot;: &#123;</div><div class="line">	        &quot;monolog/monolog&quot;: &quot;1.2.*&quot;</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们便添加了对monolog这个库的引用。没错，就是这样简单。不过，你还需要使用composer来为你更新依赖包，打开你的Shell，切换到项目目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer install</div></pre></td></tr></table></figure></p>
<p>这时，Composer便自动从互联网上更新指定依赖的库了。你会发现你的项目文件夹里面多了一个vendor文件夹，那就是依赖库包了。</p>
<p>接下来，你需要在你的系统的公共入口文件中引用自动加载器，以便自动加载类：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</div></pre></td></tr></table></figure></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>上面的例子让大家对composer的使用有了一个大概的认识。下面将向大家介绍如何在PHP环境中安装composer。<br>Unix/Linux/OSX环境</p>
<p>很幸运，利用Unix Like环境安装composer是一件很简单的事情。只需要一行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure></p>
<p>此时会为你在当前工作目录安装composer.phar文件，使用php composer.phar即可运行。当然，你可能更想让composer变成像其他一样的Unix命令，很简单，只需要再加一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure></p>
<p>注意，在权限受限的系统上，你可能需要使用sudo命令来提升至管理员账号执行。</p>
<p>这时，你就可以像例子里面那样使用composer了。<br>Windows环境</p>
<p>Composer官方推荐使用安装包进行安装，据说下载Composer-Setup.exe这个即可用向导模式安装。</p>
<p>关于手工安装的方法，请参考<a href="http://getcomposer.org/doc/00-intro.md的介绍吧。" target="_blank" rel="external">http://getcomposer.org/doc/00-intro.md的介绍吧。</a></p>
<h4 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h4><p>为了实现PHP类的随取随用，类的命名空间定义建议遵从一定的规则。这种规则可以是某一项目组约定的。不过为了使得类库统一，PHP-FIG项目指 定了一种PHP命名空间的规范PSR-0，被一些流行PHP项目采用。Composer支持这种规范的类库自动装载器，只需要向 composer.json文件中添加autoload节点即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	    &quot;autoload&quot;: &#123;</div><div class="line">	        &quot;psr-0&quot;: &#123;&quot;Acme\\&quot;: &quot;src/&quot;&#125;</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于PSR-0规范，有这么几点重要的要求：</p>
<ul>
<li>命名空间规范参考：\<vendor name="">(<namespace>)*<class name=""></class></namespace></vendor></li>
<li>每个namespace需要一个顶层空间，即vendor name。用来指定在软件包级别上区别。</li>
<li>命名空间和PHP文件的路径是一一对应的，最终命名空间分隔符会被转为DIRECTORY_SEPARATOR</li>
<li>文件名必须为类名.php</li>
</ul>
<p>关于这个规范，可以参考<a href="http://blog.mosil.biz/2012/08/psr-0-autoloading-standard/这篇文章。有关PSR-0的更多内容，可以参考他们的官方网站：https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md" target="_blank" rel="external">http://blog.mosil.biz/2012/08/psr-0-autoloading-standard/这篇文章。有关PSR-0的更多内容，可以参考他们的官方网站：https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md</a></p>
<p>注意，修改了autoload后，要重新使用composer install。</p>
<p>注意：composer默认类库是使用PSR-0规范自动加载的。所以一般无需额外配置。</p>
<h4 id="查找所需类库"><a href="#查找所需类库" class="headerlink" title="查找所需类库"></a>查找所需类库</h4><p>composer提供了一个类库的“商店”，在这里，你可以立即找到想要使用的开源类库包，然后把他们添加到你的项目中即可。传送门：<a href="https://packagist.org/" target="_blank" rel="external">https://packagist.org/</a></p>
<h4 id="打包自己的类库"><a href="#打包自己的类库" class="headerlink" title="打包自己的类库"></a>打包自己的类库</h4><p>将自己的类库贡献给大家，首先需要为自己的类库设置打包信息（要首先保证自己的类库是利用composer管理的）。在composer.json文件中设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;your-vendor-name/package-name&quot;,</div><div class="line">    &quot;require&quot;: &#123;</div><div class="line">        &quot;php&quot;: &quot;&gt;=5.3.0&quot;,</div><div class="line">        &quot;another-vendor/package&quot;: &quot;1.*&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后就可以前去<a href="https://packagist.org/提交你的类库了。" target="_blank" rel="external">https://packagist.org/提交你的类库了。</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">快速入门</a></li>
<li><a href="http://getcomposer.org/doc/" target="_blank" rel="external">文档</a></li>
<li><a href="https://packagist.org/" target="_blank" rel="external">包列表</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;现在软件规模越来越大，PHP项目的开发模式和许多年前已经有了很大变化。记得初学PHP那会儿，boblog是一个很好的例子，几乎可以代表 PHP项目的开发模式。当时PHP 5.x以上的版本刚开始流行，仍然有大量的生产环境使用PHP4.x。由于历史遗留的问题，OOP思想在PHP项目中还不是那么广泛流行。随着 PHP5.3的发布，PHP项目规模的扩大，在其他语言领域大展身手的OOP开发模式也在PHP中崭露头角。&lt;br&gt;
    
    </summary>
    
      <category term="Composer" scheme="http://pzhen.github.io/categories/Composer/"/>
    
    
      <category term="Composer" scheme="http://pzhen.github.io/tags/Composer/"/>
    
      <category term="Php" scheme="http://pzhen.github.io/tags/Php/"/>
    
  </entry>
  
  <entry>
    <title>Shell – 正则表达式</title>
    <link href="http://pzhen.github.io/2017/07/21/Shell-%E2%80%93-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://pzhen.github.io/2017/07/21/Shell-–-正则表达式/</id>
    <published>2017-07-21T09:00:23.000Z</published>
    <updated>2017-07-21T09:02:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="正则表达式的分类"><a href="#正则表达式的分类" class="headerlink" title="正则表达式的分类"></a>正则表达式的分类</h4><ul>
<li>基本的正则表达式（Basic Regular Expression 又叫Basic RegEx 简称BREs）</li>
<li>扩展的正则表达式（Extended Regular Expression 又叫Extended RegEx 简称EREs）</li>
<li>Perl的正则表达式（Perl Regular Expression 又叫Perl RegEx 简称PREs）</li>
</ul>
<h4 id="基本组成部分"><a href="#基本组成部分" class="headerlink" title="基本组成部分"></a>基本组成部分</h4><p>正则表达式的基本组成部分。</p>
<p><img src="WX20170517-1442082x.png" alt="image"></p>
<h4 id="POSIX字符类"><a href="#POSIX字符类" class="headerlink" title="POSIX字符类"></a>POSIX字符类</h4><p>POSIX字符类是一个形如[:…:]的特殊元序列（meta sequence），他可以用于匹配特定的字符范围。</p>
<p><img src="WX20170517-1440442x.png" alt="image"></p>
<h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>元字符（meta character）是一种Perl风格的正则表达式，只有一部分文本处理工具支持它，并不是所有的文本处理工具都支持。</p>
<p><img src="WX20170517-1443312x.png" alt="image"></p>
<p>文章来源：<a href="http://man.linuxde.net/docs/shell_regex.html" target="_blank" rel="external">http://man.linuxde.net/docs/shell_regex.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;正则表达式的分类&quot;&gt;&lt;a href=&quot;#正则表达式的分类&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的分类&quot;&gt;&lt;/a&gt;正则表达式的分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本的正则表达式（Basic Regular Expression 又叫Basi
    
    </summary>
    
      <category term="Linux" scheme="http://pzhen.github.io/categories/Linux/"/>
    
      <category term="Shell" scheme="http://pzhen.github.io/categories/Linux/Shell/"/>
    
    
      <category term="Shell" scheme="http://pzhen.github.io/tags/Shell/"/>
    
      <category term="正则" scheme="http://pzhen.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Git – 操作配置别名</title>
    <link href="http://pzhen.github.io/2017/07/21/Git-%E2%80%93-%E6%93%8D%E4%BD%9C%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D/"/>
    <id>http://pzhen.github.io/2017/07/21/Git-–-操作配置别名/</id>
    <published>2017-07-21T08:40:57.000Z</published>
    <updated>2017-07-21T08:43:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>有没有经常敲错命令？比如Git status？status这个单词真心不好记。</p>
<p>如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p>
<p>我们只需要敲一行命令，告诉Git，以后st就表示status：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.st status</div></pre></td></tr></table></figure></p>
<p>好了，现在敲git st看看效果。</p>
<p>当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.co checkout</div><div class="line">$ git config --global alias.ci commit</div><div class="line">$ git config --global alias.br branch</div></pre></td></tr></table></figure></p>
<p>以后提交就可以简写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git ci -m &quot;bala bala bala...&quot;</div></pre></td></tr></table></figure></p>
<p>–global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>
<p>在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.unstage &apos;reset HEAD&apos;</div></pre></td></tr></table></figure></p>
<p>当你敲入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git unstage test.py</div></pre></td></tr></table></figure></p>
<p>实际上Git执行的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD test.py</div></pre></td></tr></table></figure></p>
<p>配置一个git last，让其显示最后一次提交信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.last &apos;log -1&apos;</div></pre></td></tr></table></figure></p>
<p>这样，用git last就能显示最近一次的提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git last</div><div class="line">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</div><div class="line">Merge: bd6ae48 291bea8</div><div class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</div><div class="line">Date:   Thu Aug 22 22:49:22 2013 +0800</div><div class="line"></div><div class="line">merge &amp; fix hello.py</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有没有经常敲错命令？比如Git status？status这个单词真心不好记。&lt;/p&gt;
&lt;p&gt;如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。&lt;/p&gt;
&lt;p&gt;我们只需要敲一行命令，告诉Git，以后st就表示status：&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://pzhen.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://pzhen.github.io/tags/Git/"/>
    
      <category term="别名" scheme="http://pzhen.github.io/tags/%E5%88%AB%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Git – 集中式与分布式</title>
    <link href="http://pzhen.github.io/2017/07/21/Git-%E2%80%93-%E9%9B%86%E4%B8%AD%E5%BC%8F%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E5%8C%BA%E5%88%AB/"/>
    <id>http://pzhen.github.io/2017/07/21/Git-–-集中式与分布式-版本控制系统区别/</id>
    <published>2017-07-21T08:36:51.000Z</published>
    <updated>2017-07-21T08:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git-–-集中式与分布式-版本控制系统区别"><a href="#Git-–-集中式与分布式-版本控制系统区别" class="headerlink" title="Git – 集中式与分布式 版本控制系统区别"></a>Git – 集中式与分布式 版本控制系统区别</h4><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p>
<p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而大家工作的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始工作，工作完成，再把自己的修订推送给中央服务器。这类系统，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p>
<p><img src="git1.png" alt=""></p>
<p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<p><img src="userid1labid485time1423115040073.png" alt=""></p>
<p>许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Git-–-集中式与分布式-版本控制系统区别&quot;&gt;&lt;a href=&quot;#Git-–-集中式与分布式-版本控制系统区别&quot; class=&quot;headerlink&quot; title=&quot;Git – 集中式与分布式 版本控制系统区别&quot;&gt;&lt;/a&gt;Git – 集中式与分布式 版本控制系统
    
    </summary>
    
      <category term="Git" scheme="http://pzhen.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://pzhen.github.io/tags/Git/"/>
    
      <category term="集中式管理" scheme="http://pzhen.github.io/tags/%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%AE%A1%E7%90%86/"/>
    
      <category term="分布式管理" scheme="http://pzhen.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Shell – Grep 常见用法</title>
    <link href="http://pzhen.github.io/2017/07/21/Shell-%E2%80%93-Grep%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/"/>
    <id>http://pzhen.github.io/2017/07/21/Shell-–-Grep常见用法/</id>
    <published>2017-07-21T08:36:51.000Z</published>
    <updated>2017-07-21T08:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。<br>我经常用来查找字符串比如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -rn "字符串" .</div></pre></td></tr></table></figure>
<p>递归查找当前目录下所有文件中 “字符串” 并且所在标出所在行。</p>
<p>下面来看看具体参数：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">grep [-acinv] [--color=auto] '搜寻字符串' filename 选项参数:</div><div class="line">-a :将 binary 档案以 text 档案方式搜寻数据</div><div class="line">-c :计算找刡 '搜寻字符串' 次数</div><div class="line">-i :忽略大小写</div><div class="line">-n :输出行号</div><div class="line">-v :反向选择，亦即显示出没有 '搜寻字符串' 内容癿那一行! --color=auto :可以将找刡癿关键词部分加上颜色癿显示!</div><div class="line">-A :后面可加数字，为 after 癿意思，除了列出该行外，后续的 n 行也列出; </div><div class="line">-B :后面可加数字，为 befer 癿意思，除了列出该行外，前面的 n 行也列出;</div></pre></td></tr></table></figure></p>
<p>grep 只支持基础正则表示法，若要延伸型正则，则要用egrep或者  grep -E。</p>
<p>基础正则表示法总结如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">^word：查找字符串(word)在行首  grep -n '^word' filename</div><div class="line"><span class="meta">word$</span>:  查找字符串(word)在行末  grep -n 'word$' filename</div><div class="line">. : 任意字符</div><div class="line">\ : 转译</div><div class="line">*：前面字符 0 到 任意多个</div><div class="line">[] : 字符集合</div><div class="line">[n1-n2] : 范围  如[0-9]</div><div class="line">[^]: 字符取反，就是不能是里面的字符</div><div class="line">\&#123;n,m\&#125;: 出现n到m次</div></pre></td></tr></table></figure>
<p>延伸正则表示总结如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+  ：一个或者一个以上</div><div class="line">？ ：零个或者一个</div><div class="line">|   ： 或</div><div class="line">()  :  群组   egrep -n 'g(la|oo)d' filename  找出 glad 或者 good 两个字符串</div><div class="line">()+:  群组出现一次或者多次</div></pre></td></tr></table></figure>
<p>grep 还有很多高级用法，请感兴趣的自己去补给，我只列出了基础的常见的用法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。&lt;br&gt;我经常用来查找字符串比如：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class
    
    </summary>
    
      <category term="Linux" scheme="http://pzhen.github.io/categories/Linux/"/>
    
      <category term="Shell" scheme="http://pzhen.github.io/categories/Linux/Shell/"/>
    
    
      <category term="Grep" scheme="http://pzhen.github.io/tags/Grep/"/>
    
      <category term="Shell" scheme="http://pzhen.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Git – 全局与局部项目配置</title>
    <link href="http://pzhen.github.io/2017/07/21/Git-%E2%80%93-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B1%80%E9%83%A8%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
    <id>http://pzhen.github.io/2017/07/21/Git-–-全局配置与局部项目配置/</id>
    <published>2017-07-21T08:34:37.000Z</published>
    <updated>2017-07-21T09:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git全局配置的文件"><a href="#Git全局配置的文件" class="headerlink" title="Git全局配置的文件"></a>Git全局配置的文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.gitconfig</div></pre></td></tr></table></figure>
<p>上面就是全局配置文件位置。</p>
<p>git config –global &lt;配置名称&gt; &lt;配置的值&gt;  例如：</p>
<p>$ git config –global user.name “用户名”<br>$ git config –global user.email “邮箱”</p>
<h4 id="Git局部项目的配置文件"><a href="#Git局部项目的配置文件" class="headerlink" title="Git局部项目的配置文件"></a>Git局部项目的配置文件</h4><p>你可以在项目中使用git config 命令不带 –global 选项来设置. 这会在你当前的项目目录下创建 .git/config，从而使用针对当前项目的配置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Git全局配置的文件&quot;&gt;&lt;a href=&quot;#Git全局配置的文件&quot; class=&quot;headerlink&quot; title=&quot;Git全局配置的文件&quot;&gt;&lt;/a&gt;Git全局配置的文件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="Git" scheme="http://pzhen.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://pzhen.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git – 基本工作流程</title>
    <link href="http://pzhen.github.io/2017/07/21/Git-%E2%80%93-%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://pzhen.github.io/2017/07/21/Git-–-基本工作流程/</id>
    <published>2017-07-21T08:30:48.000Z</published>
    <updated>2017-07-21T08:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>git的基本流程如下：</p>
<h4 id="首先获取项目"><a href="#首先获取项目" class="headerlink" title="首先获取项目"></a>首先获取项目</h4><p>为了得一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Git URL). Git能在许多协议下使用，所以Git URL可能以ssh://, http(s)://, git://. 有些仓库可以通过不只一种协议来访问。</p>
<p>例如ssh方式获取远程你在阿里云下的项目：git clone git@code.aliyun.com:username/xxxx(项目).git</p>
<p>另一种方式是还没有仓库，我们要把当前文件夹设为项目仓库 ：git init  </p>
<p>在当前目录下就会有 .git 的文件夹了。</p>
<h4 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h4><ul>
<li>创建或修改文件</li>
<li>使用git add命令添加新创建或修改的文件到本地的缓存区（Index）</li>
<li>使用git commit命令提交到本地代码库</li>
<li>（可选，有的时候并没有可以同步的远端代码库）使用git push命令将本地代码库同步到远端代码库</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git的基本流程如下：&lt;/p&gt;
&lt;h4 id=&quot;首先获取项目&quot;&gt;&lt;a href=&quot;#首先获取项目&quot; class=&quot;headerlink&quot; title=&quot;首先获取项目&quot;&gt;&lt;/a&gt;首先获取项目&lt;/h4&gt;&lt;p&gt;为了得一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Gi
    
    </summary>
    
      <category term="Git" scheme="http://pzhen.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://pzhen.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Es – 安装插件</title>
    <link href="http://pzhen.github.io/2017/07/21/Elasticsearch-%E2%80%93-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/"/>
    <id>http://pzhen.github.io/2017/07/21/Elasticsearch-–-安装插件/</id>
    <published>2017-07-21T08:23:35.000Z</published>
    <updated>2017-07-21T08:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于Elasticsearch-head 插件不支持5.3.0，比较费事，装个低版本的，安装个插件。</p>
<p>来看下 2.3.0 插件安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./plugin install mobz/elasticsearch-head</div><div class="line"></div><div class="line">http://localhost:9200/_plugin/head</div></pre></td></tr></table></figure></p>
<p>安装 bigdesk 集群管理插件。</p>
<p>bigdesk是elasticsearch的一个集群监控工具，可以通过它来查看es集群的各种状态，如：cpu、内存使用情况，索引数据、搜索情况，http连接数等。项目git地址： <a href="https://github.com/lukas-vlcek/bigdesk。和head一样，它也是个独立的网页程序，使用方式和head一样。" target="_blank" rel="external">https://github.com/lukas-vlcek/bigdesk。和head一样，它也是个独立的网页程序，使用方式和head一样。</a></p>
<p>1.下载bigdesk插件，bigdesk-master.zip。</p>
<p>2.复制到 es plugins 插件目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp bigdesk-master.zip  elasticsearch-2.3.0/plugins</div></pre></td></tr></table></figure></p>
<p>3.解压 删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unzip bigdesk-master.zip </div><div class="line"></div><div class="line">rm -rf bigdesk-master.zip</div></pre></td></tr></table></figure></p>
<p>4.创建 _site 文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd bigdesk-master</div><div class="line">mkdir _site</div></pre></td></tr></table></figure></p>
<p>将 bigdesk-master 下刚刚解压的文件移动到 _site 下面。</p>
<p>4.创建 plugin-descriptor.properties 文件</p>
<p>添加一下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">description=bigdesk</div><div class="line">version=bigdesk</div><div class="line">name=bigdesk</div><div class="line">site=true</div></pre></td></tr></table></figure>
<p>5.修改js文件。</p>
<p>定位到plugins/bigdesk/_site/js/store目录，打开BigdeskStore.js，定位到142行</p>
<p>把 major ==1 改成 major &gt;=1，然后保存</p>
<p>6.搞定，浏览器查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:9200/_plugin/bigdesk-master/#nodes</div></pre></td></tr></table></figure></p>
<p>最后附上我的目录结构：</p>
<p><img src="E9B80FA8-56F0-49DE-85E0-129215E63B28.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Elasticsearch-head 插件不支持5.3.0，比较费事，装个低版本的，安装个插件。&lt;/p&gt;
&lt;p&gt;来看下 2.3.0 插件安装&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://pzhen.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://pzhen.github.io/tags/Elasticsearch/"/>
    
      <category term="Es" scheme="http://pzhen.github.io/tags/Es/"/>
    
      <category term="Ik" scheme="http://pzhen.github.io/tags/Ik/"/>
    
      <category term="插件" scheme="http://pzhen.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Es - 单机多节点集群</title>
    <link href="http://pzhen.github.io/2017/07/21/Elasticsearch-%E2%80%93-%E5%8D%95%E6%9C%BA%E5%A4%9A%E8%8A%82%E7%82%B9%E9%9B%86%E7%BE%A4/"/>
    <id>http://pzhen.github.io/2017/07/21/Elasticsearch-–-单机多节点集群/</id>
    <published>2017-07-21T08:11:43.000Z</published>
    <updated>2017-07-21T08:25:17.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="采用版本"><a href="#采用版本" class="headerlink" title="采用版本"></a>采用版本</h4><p>1.物理机 Mac</p>
<p>2.Elasticsearch 2.3.0</p>
<p>3.插件：head，bigdesk</p>
<p>4.部署4个节点：2个数据节点，1个主节点，1个备用主节点</p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>请到 GitHub 下载 ES 2.3.0 版本</p>
<p><a href="https://github.com/elastic/elasticsearch/tree/v2.3.0" target="_blank" rel="external">https://github.com/elastic/elasticsearch/tree/v2.3.0</a></p>
<h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><p>请根据自己部署软件的习惯解压到合适目录，下面是我的本机目录：</p>
<p>/Users/zhen/opt/es-cloud-2.3.0</p>
<p>es-cloud-2.3.0 文件夹放置的单机的4个节点目录，附上我的目录结构：</p>
<p><img src="WX20170509-2323572x.png" alt="image"></p>
<p>从图中大家也了解了，其实就是复制出4份来，只不过每个ES里面的配置不一样。</p>
<p>插件安装前面已经介绍过了，请看 这里 ，可以先安装master的插件，安转完成再复制就好了。</p>
<h5 id="各个节点的配置"><a href="#各个节点的配置" class="headerlink" title="各个节点的配置"></a>各个节点的配置</h5><p>主节点master：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: master</div><div class="line">node.master: true</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: false</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9200</div><div class="line">transport.tcp.port: 9300</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<p>数据节点data-1：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: data-1</div><div class="line">node.master: false</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: true</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9201</div><div class="line">transport.tcp.port: 9301</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<p>数据节点data-2：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: data-2</div><div class="line">node.master: false</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: true</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9202</div><div class="line">transport.tcp.port: 9302</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<p>备用主节点：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cluster.name: my-es</div><div class="line"><span class="meta">#</span>主节点</div><div class="line">node.name: client-1</div><div class="line">node.master: true</div><div class="line"><span class="meta">#</span>数据节点</div><div class="line">node.data: false</div><div class="line">network.host: 0.0.0.0</div><div class="line">http.port: 9203</div><div class="line">transport.tcp.port: 9303</div><div class="line"><span class="meta">#</span>集群节点列表</div><div class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9303","127.0.0.1:9301","127.0.0.1:9302"]</div><div class="line"><span class="meta">#</span>多播，单机的话无所谓了</div><div class="line">discovery.zen.ping.multicast.enabled: true</div><div class="line"><span class="meta">#</span>集群限制节点的个数</div><div class="line">node.max_local_storage_nodes: 10</div></pre></td></tr></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>启动节点，写到脚本里面执行，不用一条条的运行了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">./es-node-master/bin/elasticsearch -d</div><div class="line"></div><div class="line">./es-node-data-1/bin/elasticsearch -d</div><div class="line"></div><div class="line">./es-node-data-2/bin/elasticsearch -d</div><div class="line"></div><div class="line">./es-node-client/bin/elasticsearch -d</div></pre></td></tr></table></figure>
<h5 id="查看集群状态："><a href="#查看集群状态：" class="headerlink" title="查看集群状态："></a>查看集群状态：</h5><p><img src="WX20170509-224809zhu.png" alt="image"></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>假如我们挂掉主节点，再来看看我们的集群状态。</p>
<p><img src="WX20170509-2250282x.png" alt="image"></p>
<p>当我们挂掉了master，访问任意一个节点的head插件，来看集群状态。选举了client-1为主节点。</p>
<p>最后附上bigdesk的截图：</p>
<p><img src="2A230B92-4278-4C3D-8001-19CB858086AD.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;采用版本&quot;&gt;&lt;a href=&quot;#采用版本&quot; class=&quot;headerlink&quot; title=&quot;采用版本&quot;&gt;&lt;/a&gt;采用版本&lt;/h4&gt;&lt;p&gt;1.物理机 Mac&lt;/p&gt;
&lt;p&gt;2.Elasticsearch 2.3.0&lt;/p&gt;
&lt;p&gt;3.插件：head，bigdes
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://pzhen.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://pzhen.github.io/tags/Elasticsearch/"/>
    
      <category term="Es" scheme="http://pzhen.github.io/tags/Es/"/>
    
      <category term="Ik" scheme="http://pzhen.github.io/tags/Ik/"/>
    
      <category term="集群" scheme="http://pzhen.github.io/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Maven - Mac 安装</title>
    <link href="http://pzhen.github.io/2017/07/21/Maven-Mac-%E5%AE%89%E8%A3%85/"/>
    <id>http://pzhen.github.io/2017/07/21/Maven-Mac-安装/</id>
    <published>2017-07-21T08:04:51.000Z</published>
    <updated>2017-07-21T09:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.下载maven</p>
<p><a href="http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.zip" target="_blank" rel="external">http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.zip</a></p>
<p>2.解压</p>
<p>unzip apache-maven-3.5.0-bin.zip</p>
<p>如果是tar.gz包</p>
<p>tar xzvf apache-maven-3.5.0-bin.tar.gz</p>
<p>3.配置环境变量</p>
<p>vim ~/.bash_profile</p>
<p>添加路径：</p>
<p>export PATH=/路径/apache-maven-3.5.0/bin:$PATH</p>
<p>4.查看</p>
<p>mvn -version</p>
<p>官方install地址：<a href="http://maven.apache.org/install.html" target="_blank" rel="external">http://maven.apache.org/install.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.下载maven&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.zip&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="Linux" scheme="http://pzhen.github.io/categories/Linux/"/>
    
      <category term="Maven" scheme="http://pzhen.github.io/categories/Linux/Maven/"/>
    
    
      <category term="Linux" scheme="http://pzhen.github.io/tags/Linux/"/>
    
      <category term="Maven" scheme="http://pzhen.github.io/tags/Maven/"/>
    
      <category term="Java" scheme="http://pzhen.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
